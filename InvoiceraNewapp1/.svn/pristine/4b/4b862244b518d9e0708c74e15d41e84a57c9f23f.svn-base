package com.invoicera.Fragment;

import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.EditorInfo;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;

import com.invoicera.CustomView.FloatingAction;
import com.invoicera.Database.DatabaseHelper;
import com.invoicera.GlobalData.Constant;
import com.invoicera.InterFace.WebApiResult;
import com.invoicera.ListViewAdpter.ClientListAdapter;
import com.invoicera.Webservices.WebRequest;
import com.invoicera.androidapp.Home;
import com.invoicera.androidapp.R;
import com.invoicera.listener.FragmentChanger;
import com.invoicera.model.ClientAttribute;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionButton;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionHelper;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionLayout;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RFACLabelItem;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RapidFloatingActionContentLabelList;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

/**
 * Created by vinove on 13/8/15.
 */
public class ClientList extends BaseFragment implements
        WebApiResult, View.OnClickListener, RapidFloatingActionContentLabelList.OnRapidFloatingActionContentLabelListListener {

    public FragmentChanger fragmentChanger;

    public ImageView searchCancelImg;
    public RelativeLayout actionRelative;
    public TableLayout actionTable;
    public ImageView closeActionPopUp;
    public TableRow deleteLinear, archiveLinear, restoreLinear;
    boolean isActionPopOpen = false;
    WebApiResult webApiResult;
    private RapidFloatingActionLayout rfaLayout;
    private RapidFloatingActionHelper rfabHelper;
    private RapidFloatingActionButton rfaButton;
    RapidFloatingActionContentLabelList rfaContent;
    public boolean isSearchEnable = false;

    DatabaseHelper db;

    public TextView deleteTV, archiveTV, ClientNameTV, activeTV;

    public String clientId;


    View view;

    public EditText searchEt;
    WebRequest request;


    ArrayList<ClientAttribute> clientModels;
    ClientListAdapter adapter;


    ListView listView;
    FloatingAction floatingAction;


    @Override
    public View onCreateView(LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {

        final View view = inflater.inflate(R.layout.client_list, container,
                false);


        Home.toolbarText.setText("Client");
        searchEt = (EditText) view.findViewById(R.id.searchEdit);

        listView = (ListView) view.findViewById(R.id.clientList);
        clientModels = new ArrayList<>();

        searchCancelImg = (ImageView) view.findViewById(R.id.searchCancel);
        actionTable = (TableLayout) view.findViewById(R.id.actionTable);
        searchCancelImg.setOnClickListener(this);
        closeActionPopUp = (ImageView) view.findViewById(R.id.closeAction);
        actionRelative = (RelativeLayout) view.findViewById(R.id.actionRelative);
        deleteTV = (TextView) view.findViewById(R.id.delete);
        archiveTV = (TextView) view.findViewById(R.id.archive);
        ClientNameTV = (TextView) view.findViewById(R.id.clientName);

        activeTV = (TextView) view.findViewById(R.id.active);
        restoreLinear = (TableRow) view.findViewById(R.id.restoreLinear);
        deleteLinear = (TableRow) view.findViewById(R.id.deleteLinear);
        archiveLinear = (TableRow) view.findViewById(R.id.archiveLinear);
        webApiResult = this;
        activeTV.setOnClickListener(this);
        deleteTV.setOnClickListener(this);
        archiveTV.setOnClickListener(this);
        closeActionPopUp.setOnClickListener(this);

        searchCancelImg.setVisibility(View.GONE);


        searchEt.setImeActionLabel("Search", EditorInfo.IME_ACTION_UNSPECIFIED);
        searchEt.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if ((event != null && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) || (actionId == EditorInfo.IME_ACTION_DONE)) {
                    Log.i(" ", "Enter pressed");
                    try {
                        isSearchEnable = true;
                        searchCancelImg.setVisibility(View.VISIBLE);

                    } catch (Exception e) {

                        Log.i("exception", e.getMessage());

                    }
                }
                return false;
            }
        });


        ///floating tap-------------
        rfaContent = new RapidFloatingActionContentLabelList(context);
        rfaButton = (RapidFloatingActionButton) view.findViewById(R.id.label_list_sample_rfab);
        rfaLayout = (RapidFloatingActionLayout) view.findViewById(R.id.label_list_sample_rfal);

        rfaContent.setOnRapidFloatingActionContentLabelListListener(this);
        String backColor = "#00000";

        floatingAction = new FloatingAction(context, fragmentChanger, rfaLayout, rfaButton, rfaContent);


        //client list


        db = new DatabaseHelper(context);


        String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                + " From " + DatabaseHelper.TAble_ClientList;

        Cursor cursor = db.getRecords(selectQuery);


        boolean isShowProgressBar = false;
        if (cursor.moveToFirst() && cursor.getCount() > 0) {

            clientModels = new ArrayList<>();
            for (int i = 0; i < cursor.getCount(); i++) {

                try {
                    ClientAttribute map;
                    JSONObject object = new JSONObject(cursor.getString(cursor
                            .getColumnIndex(DatabaseHelper.JSON_DATA)));

                    for (int k = 0; k < object.getJSONObject("clients").getJSONArray("client").length(); k++) {
                        map = new ClientAttribute();
                        JSONObject chargeObj = object.getJSONObject("clients").getJSONArray("client").getJSONObject(k);

                        map.setClientName(chargeObj.getString("name"));
                        map.setClientId(chargeObj.getString("client_id"));
                        map.setAddress(chargeObj.getString("address"));
                        map.setClientCurrency(chargeObj.getString("currency"));
                        map.setOrganizationname(chargeObj.getString("organization"));
                        map.setOutStanding(chargeObj.getString("outstanding"));
                        map.setCredit(chargeObj.getString("credit_amount"));
                        map.setEmailID(chargeObj.getString("email"));
                        map.setClientCurrency(chargeObj.getString("currency"));
                        if (chargeObj.has("status"))
                            map.setStatus(chargeObj.getString("status"));
                        clientModels.add(map);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            Home.progressBarHome.setVisibility(View.VISIBLE);
        } else isShowProgressBar = true;


        JSONObject obj = new JSONObject();
        try {
            obj.put(Constant.KEY_METHOD, "listClient");
        } catch (JSONException e) {
            e.printStackTrace();
        }
        request = new WebRequest(context, obj, Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_LIST, Constant.token, this, isShowProgressBar);
        request.execute();


        adapter = new ClientListAdapter(context, clientModels);
        listView.setAdapter(adapter);


        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {


                if (!global.isNetworkAvailable()) {
                    global.showAlert("No network connection", context);
                    return true;
                }

   /*             if (isActionPopOpen)
                    return true;*/

                isActionPopOpen = true;
                actionRelative.setVisibility(View.VISIBLE);
                clientId = clientModels.get(position).getClientId();
                ClientNameTV.setText(clientModels.get(position).getOrganizationname());


                if (clientModels.get(position).getStatus().equalsIgnoreCase("Cancel") || clientModels.get(position).getStatus().equalsIgnoreCase("Deleted")) {
                    restoreLinear.setVisibility(View.VISIBLE);
                    deleteLinear.setVisibility(View.GONE);
                    archiveLinear.setVisibility(View.GONE);


                } else {
                    restoreLinear.setVisibility(View.GONE);
                    deleteLinear.setVisibility(View.VISIBLE);
                    archiveLinear.setVisibility(View.VISIBLE);
                }

                animation(actionTable, R.anim.bottom_up, Constant.LIST_ACTION_ANIMATION_TYPE.OPEN);


                return true;
            }
        });


        return view;

    }

    @Override
    public void onResume() {
        super.onResume();


    }


    @Override
    public void onAttach(Activity activity) {
        // TODO Auto-generated method stub
        fragmentChanger = (FragmentChanger) activity;

        super.onAttach(activity);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);


    }


    @Override
    public void onClick(View v) {

        switch (v.getId()) {

            case R.id.closeAction:
                animation(actionTable, R.anim.bottom_down, Constant.LIST_ACTION_ANIMATION_TYPE.CLOSE);
                break;

        }


    }


    @Override
    public void onPause() {
        super.onPause();

        Log.e("pause", "");

    }

    @Override
    public void getWebResult(Constant.SERVICE_TYPE type, JSONObject result) {


    }


    @Override
    public void onRFACItemLabelClick(int position, RFACLabelItem item) {
        // showToastMessage("clicked label: " + position);

        floatingAction.createFunction(position);

    }

    @Override
    public void onRFACItemIconClick(int position, RFACLabelItem item) {

        floatingAction.createFunction(position);


    }

    public void animation(TableLayout layout, int animationId, final Constant.LIST_ACTION_ANIMATION_TYPE type) {

        android.view.animation.Animation animationInfo;

        animationInfo = AnimationUtils.loadAnimation(getActivity().getApplicationContext(),
                animationId);

        animationInfo.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {

                switch (type) {

                    case OPEN:


                        break;
                    case CLOSE:
                        isActionPopOpen = false;

                        actionRelative.setVisibility(View.GONE);
                        break;

                }

            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });

        layout.startAnimation(animationInfo);


    }


}
