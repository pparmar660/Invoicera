package com.invoicera.ViewPagerFragment;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.invoicera.CustomView.NoScrollListView;
import com.invoicera.Database.DatabaseHelper;
import com.invoicera.Fragment.BaseFragment;
import com.invoicera.Fragment.SelectClient;
import com.invoicera.GlobalData.Constant;
import com.invoicera.InterFace.ResultFromChildFragment;
import com.invoicera.InterFace.UpdateChargeAndTax;
import com.invoicera.InterFace.WebApiResult;
import com.invoicera.ListViewAdpter.ChargesAndTaxListAdapter;
import com.invoicera.ListViewAdpter.ItemListAdapter;
import com.invoicera.Utility.Utils;
import com.invoicera.Webservices.WebRequest;
import com.invoicera.androidapp.CreateInvoiceDetail;
import com.invoicera.androidapp.CreateItem;
import com.invoicera.androidapp.R;
import com.invoicera.androidapp.SelectPaymentGateWay;
import com.invoicera.listener.FragmentChanger;
import com.invoicera.model.ItemModel;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;

public class CreateEditInvoicePagerFragment extends BaseFragment implements
        OnClickListener, WebApiResult, RadioGroup.OnCheckedChangeListener, UpdateChargeAndTax {

    private NoScrollListView chargesListView, taxListView;
    RelativeLayout AddItemView, createInvoiceNumberVew;
    // public static ArrayList<AdditionalCharge> selectedAdditionalChargeList;
    public FragmentChanger fragmentChanger;
    transient Context myContext;
    ItemListAdapter itemListAdapter;
    transient Bundle argument;
    transient ResultFromChildFragment fromChildFragment;
    ArrayList<ItemModel> itemList = new ArrayList<ItemModel>();
    LinearLayout itemLiner;
    public String invoice_no, invoice_date, invoice_title, selectQuery, schedule_on, late_feeId, due_date, invoice_note, term_condition, lateFeeName, clientName, clientId, clientAdd, clientCurrency;

    TextView addCharges, invoiceNoTV, subtotalValueTV, itemTotalTaxTV, totalTV, totalAfterDiscountTV, addTax, netBalanceTV, invoice_dateTV, sendTV, saveTV;
    String discount_type = "Fixed", send_mail = "0";
    RadioGroup discountRadioGroup;
    ContentValues values;
    DatabaseHelper db;

    public TextView clientTV, selectItemTV, grossTotalTV, paymentGatewayTextView;
    boolean isDiscountOnTotal, isTaxOnTotal, isAddCredit, isPartialPayment, isTitleShow;
    transient Intent i;
    double totalItemTaxValue = 0, SubTotalValue, discount, itemsTotalAmount, totalAfterDiscount, netBalance, grossTotal;
    boolean isDiscountFlat = true;
    EditText discountEt;
    CheckBox AllowPartialPaymentCheckBox;
    ArrayList<String> selectedPaymentGatewayList;
    Cursor cursor;
    String invoiceId;

    WebApiResult webApiResult;
    Calendar myCalendar;

    HashMap<Integer, Integer> selectedTax;
    ChargesAndTaxListAdapter additionalChargesAdapter, taxListAdapter;
    boolean isEditing = false;

    @Override
    public View onCreateView(LayoutInflater inflater,
                             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        // TODO Auto-generated method stub

        View view = inflater.inflate(R.layout.create_invoice, container, false);

        //
        isEditing = false;
        Bundle argument = getArguments();

        if (argument.getString(Constant.KEY_INVOICE_ID) != null) {
            if (!argument.getString(Constant.KEY_INVOICE_ID).isEmpty())
                invoiceId = argument.getString(Constant.KEY_INVOICE_ID);
            isEditing = true;
        }


        chargesListView = (NoScrollListView) view.findViewById(R.id.chargeslistView);
        taxListView = (NoScrollListView) view.findViewById(R.id.taxlistView);
        selectItemTV = (TextView) view.findViewById(R.id.item_add);
        AddItemView = (RelativeLayout) view.findViewById(R.id.addItemLinear);
        AddItemView.setVisibility(View.GONE);
        createInvoiceNumberVew = (RelativeLayout) view
                .findViewById(R.id.creteNumber);
        db = new DatabaseHelper(context);
        // selectedAdditionalChargeList = new ArrayList<>();
        itemListAdapter = new ItemListAdapter((Activity) context);

        invoiceNoTV = (TextView) view.findViewById(R.id.invoice_no);
        invoice_dateTV = (TextView) view.findViewById(R.id.invoice_date);
        clientTV = (TextView) view.findViewById(R.id.selectClientView);
        itemList = new ArrayList<>();
        netBalanceTV = (TextView) view.findViewById(R.id.netbalance);
        webApiResult = this;

        additionalChargesAdapter = new ChargesAndTaxListAdapter(context, Constant.POP_UP.ADDITIONAL_CHARGES, Constant.SERVICE_TYPE.GET_ADDITIONAL_CHARGE, this);
        taxListAdapter = new ChargesAndTaxListAdapter(context, Constant.POP_UP.TAX, Constant.SERVICE_TYPE.GET_TAX_LIST, this);
        taxListView.setAdapter(taxListAdapter);
        chargesListView = (NoScrollListView) view.findViewById(R.id.chargeslistView);
        chargesListView.setAdapter(additionalChargesAdapter);
        // ---
        addCharges = (TextView) view.findViewById(R.id.addCharges);
        sendTV = (TextView) view.findViewById(R.id.send);
        saveTV = (TextView) view.findViewById(R.id.save);
        sendTV.setOnClickListener(this);
        saveTV.setOnClickListener(this);
        clientTV.setOnClickListener(this);
        selectItemTV.setOnClickListener(this);
        AddItemView.setOnClickListener(this);
        addCharges.setOnClickListener(this);
        createInvoiceNumberVew.setOnClickListener(this);
        itemLiner = (LinearLayout) view.findViewById(R.id.linear_item);
        itemLiner.setVisibility(View.GONE);
        discountRadioGroup = (RadioGroup) view.findViewById(R.id.discount);
        discountRadioGroup.setOnCheckedChangeListener(this);
        discountEt = (EditText) view.findViewById(R.id.dicountValue);
        subtotalValueTV = (TextView) view.findViewById(R.id.subtotalValue);
        itemTotalTaxTV = (TextView) view.findViewById(R.id.total_tax_on_item);
        totalTV = (TextView) view.findViewById(R.id.total);
        totalAfterDiscountTV = (TextView) view.findViewById(R.id.total_after_discount);
        discountEt = (EditText) view.findViewById(R.id.discountValue);
        addTax = (TextView) view.findViewById(R.id.addTax);
        addTax.setOnClickListener(this);
        selectedTax = new HashMap<>();
        grossTotalTV = (TextView) view.findViewById(R.id.grossTotal);
        AllowPartialPaymentCheckBox = (CheckBox) view.findViewById(R.id.allowPartialPayment);
        paymentGatewayTextView = (TextView) view.findViewById(R.id.paymentGateWay);
        paymentGatewayTextView.setOnClickListener(this);
        selectedPaymentGatewayList = new ArrayList<>();
        myCalendar = Calendar.getInstance();
        String myFormat = "yyyy-MM-dd"; //In which you need put here
        SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);
        invoice_dateTV.setText(sdf.format(myCalendar.getTime()));


        discountEt.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {


                updateIem();


            }
        });

        if (!isEditing) {
            // get data from web ---------------------------------------------------------

            JSONObject obj = new JSONObject();

            try {
                obj.put(Constant.KEY_METHOD, "getInvoiceSetting");
            } catch (JSONException e) {

                e.printStackTrace();
            }
            WebRequest request = new WebRequest(context, obj, Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_SETTING, this, true);
            request.execute();

            //-----------------------------------------------------------------------------------------
        }


        Log.e("isEditting*********:", isEditing + "");

        return view;

    }


    @Override
    public void onAttach(Activity activity) {
        // TODO Auto-generated method stub
        super.onAttach(activity);

        fragmentChanger = (FragmentChanger) getActivity();

    }

    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub

        switch (v.getId()) {
            case R.id.selectClientView:

                SelectClient myf = new SelectClient();
                itemList = new ArrayList<>();
                updateIem();
                getChildFragmentManager().beginTransaction().replace(R.id.mainframe, myf).commit();
                getView().findViewById(R.id.mainframe).setVisibility(View.VISIBLE);


                break;

            case R.id.item_add:

            case R.id.addItemLinear:

                myContext = getActivity().getApplicationContext();

                i = new Intent(myContext, CreateItem.class);
                if (clientCurrency != null) {
                    i.putExtra(Constant.KEY_CLIENT_CURRENCY, clientCurrency);
                    getActivity().startActivityForResult(i,
                            Constant.requestCodeCreateInvoiceItem);
                    selectItemTV.setVisibility(View.GONE);

                    AddItemView.setVisibility(View.VISIBLE);
                } else {
                    Toast.makeText(context, "Client currency is not valid", Toast.LENGTH_SHORT).show();

                }
                break;
            case R.id.creteNumber:
                Intent intent = new Intent(context, CreateInvoiceDetail.class);
                intent.putExtra(Constant.KEY_NO, invoice_no);
                intent.putExtra(Constant.KEY_DATE, invoice_date);
                intent.putExtra(Constant.KEY_TITLE, invoice_title);
                intent.putExtra(Constant.KEY_DUE_DATE, due_date);
                intent.putExtra(Constant.KEY_SCHEDUAL_DATE, schedule_on);
                intent.putExtra(Constant.KEY_NOTE, invoice_note);
                intent.putExtra(Constant.KEY_TermsAndCondition, term_condition);
                intent.putExtra(Constant.KEY_LATE_FEE_ID, late_feeId);
                intent.putExtra(Constant.KEY_LATE_FEE_NAME, lateFeeName);
                getActivity().startActivityForResult(intent, Constant.requestCodeCreateInvoiceDetail);
                break;
            case R.id.addCharges:
                additionalChargesAdapter.add(new HashMap<String, String>());

                break;

            case R.id.addTax:
                taxListAdapter.add(new HashMap<String, String>());

                break;

            case R.id.paymentGateWay:
                myContext = getActivity().getApplicationContext();
                i = new Intent(myContext, SelectPaymentGateWay.class);
                i.putExtra(Constant.KEY_PAYMENT_GATEWAY, selectedPaymentGatewayList);
                getActivity().startActivityForResult(i,
                        Constant.requestCodeSelectPaymentGateway);

                break;


            case R.id.save:
                send_mail = "0";
                createInvoice();
                break;
            case R.id.send:

                send_mail = "1";
                createInvoice();
                break;
            default:
                break;
        }

    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (data == null)
            return;
        if (requestCode == Constant.requestCodeCreateInvoiceItem) {
            ItemModel model = (ItemModel) data.getParcelableExtra(Constant.KEY_ITEM);
            itemList.add(model);
            updateIem();
/*

            itemLiner.setVisibility(View.VISIBLE);
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View itemRow = inflater.inflate(R.layout.create_invoice_item_row, null);
            itemLiner.addView(itemRow);*/
        }
        System.out.println("data get :" + data + "---" + requestCode);
        if (requestCode == Constant.requestCodeCreateInvoiceDetail) {
            invoice_no = data.getStringExtra(Constant.KEY_NO);

            invoice_date = data.getStringExtra(Constant.KEY_DATE);

            invoice_title = data.getStringExtra(Constant.KEY_TITLE);
            invoice_note = data.getStringExtra(Constant.KEY_NOTE);
            due_date = data.getStringExtra(Constant.KEY_DUE_DATE);
            late_feeId = data.getStringExtra(Constant.KEY_LATE_FEE_ID);
            term_condition = data.getStringExtra(Constant.KEY_TermsAndCondition);
            schedule_on = data.getStringExtra(Constant.KEY_SCHEDUAL_DATE);
            lateFeeName = data.getStringExtra(Constant.KEY_LATE_FEE_NAME);
            invoiceNoTV.setText(invoice_no);
            invoice_dateTV.setText(invoice_date);

        }
    }

    @Override
    public void getWebResult(Constant.SERVICE_TYPE type, JSONObject result) {
        if (result == null)
            return;
        try {
            if (!result.getString("code").equalsIgnoreCase("200")) {
                if (result.has("message"))
                    Toast.makeText(context, result.getString("message").toString(), Toast.LENGTH_SHORT).show();
                return;

            }
        } catch (JSONException e) {
            e.printStackTrace();
        }


        JSONObject object;
        boolean updatePopUp = false;
        switch (type) {

            case GET_SETTING:
                db.ClearTable(DatabaseHelper.Table_InvoiceCreateSettings);
                values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString());
                db.insert(DatabaseHelper.Table_InvoiceCreateSettings, values);

                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_InvoiceCreateSettings;

                cursor = db.getRecords(selectQuery);
                object = null;
                if (cursor.moveToFirst() && cursor.getCount() > 0)
                    for (int i = 0; i < cursor.getCount(); i++) {

                        try {
                            object = new JSONObject(cursor.getString(cursor.getColumnIndex(DatabaseHelper.JSON_DATA)));
                            invoice_no = object.getString("invoice_no");
                            invoice_note = object.getString("Invoice_Notes");
                            invoiceNoTV.setText(invoice_no);

                            if (object.getString("discountOnTotal").equalsIgnoreCase("No"))
                                isDiscountOnTotal = false;
                            else isDiscountOnTotal = true;

                            if (object.getString("taxOnTotal").equalsIgnoreCase("No"))
                                isTaxOnTotal = false;
                            else isTaxOnTotal = true;

                            if (object.getString("isAddCredit").equalsIgnoreCase("No"))
                                isAddCredit = false;
                            else isAddCredit = true;


                            if (object.getString("isPartialAmount").equalsIgnoreCase("No"))
                                isPartialPayment = false;
                            else isPartialPayment = true;


                            if (object.getString("isTitleShowing").equalsIgnoreCase("No"))
                                isTitleShow = false;
                            else isTitleShow = true;


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }


                    }


                break;


        }
    }


    public void getChildFragment(Constant.FRAGMENT_RESULT type, HashMap<String, String> result) {

        switch (type) {


            case CLIENT:
                getView().findViewById(R.id.mainframe).setVisibility(View.GONE);
                clientAdd = result.get(Constant.KEY_ADDRESS);
                clientName = result.get(Constant.KEY_CLIENT_NAME);
                clientId = result.get(Constant.KEY_CLIENT_ID);
                clientCurrency = result.get(Constant.KEY_CLIENT_CURRENCY);
                clientTV.setText(clientName);

                break;
        }

    }

    public void updateIem() {

        itemLiner.removeAllViews();
        ItemModel model;
        if (itemList.isEmpty()) {

            itemLiner.setVisibility(View.GONE);
            selectItemTV.setVisibility(View.VISIBLE);
            AddItemView.setVisibility(View.GONE);
            return;
        }
        SubTotalValue = 0;
        totalItemTaxValue = 0;
        itemsTotalAmount = 0;
        totalAfterDiscount = 0;
        discount = 0;
        netBalance = 0;
        for (int i = 0; i < itemList.size(); i++)

        {
            model = itemList.get(i);
            itemLiner.setVisibility(View.VISIBLE);
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View itemRow = inflater.inflate(R.layout.create_invoice_item_row, null);

            ImageView crossImage = (ImageView) itemRow.findViewById(R.id.cross);
            crossImage.setTag(i);
            crossImage.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {

                    int pos = (int) v.getTag();
                    itemList.remove(pos);
                    updateIem();
                }
            });

            TextView itemName = (TextView) itemRow.findViewById(R.id.itemName);
            TextView qtyAndCost = (TextView) itemRow.findViewById(R.id.qty_uc);
            TextView discountValue = (TextView) itemRow.findViewById(R.id.discount);
            TextView totalValue = (TextView) itemRow.findViewById(R.id.total);
            itemName.setText(model.getName());
            qtyAndCost.setText("QTY : " + model.getQuantity() + " Unit Cost : " + model.getUnit_cost());
            discountValue.setText("Discount : " + model.getDiscount());
            totalValue.setText(clientCurrency + " " + model.getTotalValue());

            try {
                totalItemTaxValue = totalItemTaxValue + Double.parseDouble(model.getTotalTAx().replaceAll(",", ""));
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }

            try {
                SubTotalValue = SubTotalValue + Double.parseDouble(model.getTotalValue().replaceAll(",", ""));
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }


            itemLiner.addView(itemRow);


        }
        System.out.println(subtotalValueTV + "," + itemTotalTaxTV);
        subtotalValueTV.setText(Utils.FloatToStringLimits(SubTotalValue));
        itemTotalTaxTV.setText(Utils.FloatToStringLimits(totalItemTaxValue));
        itemsTotalAmount = (SubTotalValue + totalItemTaxValue);
        totalTV.setText(Utils.FloatToStringLimits(itemsTotalAmount));

        if (isDiscountFlat) {
            try {

                if (!discountEt.getText().toString().isEmpty())
                    discount = Double.parseDouble(discountEt.getText().toString().replaceAll(",", ""));
            } catch (NumberFormatException e) {
                discount = 0;
                e.printStackTrace();
            }
        } else {
            try {
                if (!discountEt.getText().toString().isEmpty())
                    discount = (itemsTotalAmount) * Double.parseDouble(discountEt.getText().toString().replaceAll(",", "")
                    ) / 100;
            } catch (NumberFormatException e) {
                discount = 0;
                e.printStackTrace();
            }


        }

        totalAfterDiscount = itemsTotalAmount - discount;
        totalAfterDiscountTV.setText(Utils.FloatToStringLimits(totalAfterDiscount));

        netBalance = totalAfterDiscount;


        //add  additional charges

        if (!additionalChargesAdapter.selectedItemList.isEmpty())
            for (int i = 0; i < additionalChargesAdapter.selectedItemList.size(); i++) {

                if (additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_NAME) != null)
                    if (!additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_NAME).isEmpty()) {


                        try {
                            if (additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_TYPE).equalsIgnoreCase("Percent")) {


                                netBalance = netBalance + (totalAfterDiscount * (Double.parseDouble(additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""))) / 100);


                            } else {

                                netBalance = netBalance + Double.parseDouble(additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""));
                            }
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                        }


                    }

            }

        netBalanceTV.setText(Utils.FloatToStringLimits(netBalance));


        // add tax


        grossTotal = netBalance;

        if (!taxListAdapter.selectedItemList.isEmpty()) {
            for (int i = 0; i < taxListAdapter.selectedItemList.size(); i++) {
                if (taxListAdapter.selectedItemList.get(i).get(Constant.KEY_NAME) != null)
                    if (!taxListAdapter.selectedItemList.get(i).get(Constant.KEY_NAME).isEmpty()) {

                        try {
                            if (taxListAdapter.selectedItemList.get(i).get(Constant.KEY_TYPE).equalsIgnoreCase("Percent")) {
                                grossTotal = grossTotal + (netBalance * (Double.parseDouble(taxListAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""))) / 100);


                            } else {


                                grossTotal = grossTotal + (Double.parseDouble(taxListAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", "")));
                            }
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                        }

                    }

            }


        }

        grossTotalTV.setText(Utils.FloatToStringLimits(grossTotal));


    }


    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {

        switch (checkedId) {

            case R.id.flat:
                isDiscountFlat = true;
                discountEt.setText("0.0");
                discount_type = "Fixed";
                break;
            case R.id.percent:
                discount_type = "Percent";
                isDiscountFlat = false;
                discountEt.setText("0.0");
                break;

        }

    }


    @Override
    public void UpdateChargeAndTaxValue() {
        updateIem();

    }


    // create invoice remote call to web and sending data
    @SuppressWarnings("rawtypes")
    private void createInvoice() {

        try {
            JSONObject CreateInvoice = new JSONObject();

            JSONObject obj1 = null;
            JSONArray itemsarray = new JSONArray();
            try {
                for (int i = 0; i < itemList.size(); i++) {
                    obj1 = new JSONObject();
                    ItemModel item = itemList.get(i);

                    obj1.put("name", item.getName());
                    obj1.put("type", item.getType());
                    obj1.put("description", item.getDescription());

                    try {
                        obj1.put("quantity",
                                Double.parseDouble(item.getQuantity().replaceAll(",", "")) + "");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                        obj1.put("quantity", item.getQuantity());
                    }

                    try {
                        obj1.put("unit_cost", Double.parseDouble(item.getUnit_cost().replaceAll(",", "")) + "");
                    } catch (Exception Ex) {
                        obj1.put("unit_cost", item.getUnit_cost());
                    }
                    obj1.put("discount", item.getDiscount());
                    obj1.put("discount_type", item.getDiscount_type());
                    obj1.put("tax1_id", item.getTax1Id());
                    obj1.put("tax2_id", item.getTax2Id());
                    itemsarray.put(obj1);
                }
            } catch (JSONException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            JSONObject item = new JSONObject();
            item.put("item", itemsarray);

            JSONArray chargesarray = new JSONArray();


            for (int i = 0; i < additionalChargesAdapter.selectedItemList.size(); i++) {
                obj1 = new JSONObject();
                obj1.put("name", additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_NAME));
                obj1.put("type", additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_TYPE));
                obj1.put("amount", additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE));
                chargesarray.put(obj1);

            }
            JSONObject charge = new JSONObject();
            charge.put("additional_charge", chargesarray);

            JSONArray taxarray = new JSONArray();

            for (int i = 0; i < taxListAdapter.selectedItemList.size(); i++) {


                taxarray.put(taxListAdapter.selectedItemList.get(i).get(Constant.KEY_ID));
            }

            JSONObject tax = new JSONObject();
            tax.put("tax_ids", taxarray);
            JSONArray paymentsgatewayarray = new JSONArray();
            String isPartialPayment;

     /*       for (int i = 0; i < paymentItems.size(); i++) {

                CheckItem paymentgatewayids = (CheckItem) paymentItems.get(i);
                paymentsgatewayarray.put(paymentgatewayids.getId());
            }*/
            if (AllowPartialPaymentCheckBox.isChecked()) {
                isPartialPayment = "Y";
            } else {
                isPartialPayment = "N";
            }
            CreateInvoice.put("isPartialPayment", isPartialPayment);
            JSONObject client = new JSONObject();

            client.put("client_id", clientId);
            Log.e("Chk--:::7", "");
            JSONObject Jdiscount = new JSONObject();
            Jdiscount.put("type", discount_type);
            Jdiscount.put("amount", discountEt.getText().toString());

            CreateInvoice.put("payment_gateway_ids", paymentsgatewayarray);
            CreateInvoice.put("client", client);
            CreateInvoice.put("discount", Jdiscount);
            CreateInvoice.put("method", "createInvoice");
            CreateInvoice.put("send_mail", send_mail);

            CreateInvoice.put("invoice_title", invoice_title);

            //CreateInvoice.put(GlobalVariables.TAG_CREATED_BY, ConstantList.userId);

            CreateInvoice.put("number", invoice_no);
            CreateInvoice.put("date", invoice_date);
            CreateInvoice.put("due_date", due_date);
            CreateInvoice.put("late_fee", late_feeId);
            CreateInvoice.put("schedule_date", schedule_on);
            CreateInvoice.put("payment_term", "");

            CreateInvoice.put("status", "");
            CreateInvoice.put("notes", invoice_note);
            CreateInvoice.put("terms", term_condition);
            CreateInvoice.put("items", item);
            CreateInvoice.put("taxes", tax);
            CreateInvoice.put("additional_charges", charge);


            JSONObject CreateInvoiceMainObj = new JSONObject();
            JSONArray CreateInvoiceArray = new JSONArray();
            CreateInvoiceArray.put(0, CreateInvoice);
            CreateInvoiceMainObj.put("createInvoice", CreateInvoiceArray);

            System.out.println("Look %%%%%%%%%%%%%%%%%%%%%%%%::" + CreateInvoiceMainObj.toString());

            WebRequest request = new WebRequest(context, CreateInvoiceMainObj, Constant.invoicelistURL, Constant.SERVICE_TYPE.CREATE_INVOICE, this, true);
            request.execute();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    public void setDataForEditing(String invoiceId) {
        if (db == null)
            return;

        JSONObject object = null;
        //---------------Load data from local
        String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                + " From " + DatabaseHelper.Table_InvoicePreviewData + " WHERE " + DatabaseHelper.INVOICE_ID + " ='" + invoiceId + "'";
        Cursor cursor = db.getRecords(selectQuery);


        if (cursor.moveToFirst() && cursor.getCount() > 0) {


            //totalItem = new ArrayList<>();
            for (int i = 0; i < cursor.getCount(); i++) {

                try {

                    object = (new JSONObject
                            (cursor.getString(cursor.getColumnIndex(DatabaseHelper.JSON_DATA)))).getJSONObject("invoice");


                } catch (JSONException e) {
                    e.printStackTrace();
                }


            }


        }
        if (object == null)
            return;

        Log.e("Editing --%%%%%%%%:", object.toString());

        try {
            invoice_no = object.getString("number");
            invoice_title = object.getString("invoice_title");
            invoice_note = object.getString("notes");
            term_condition = object.getString("terms");
            invoice_date = object.getString("date");
            due_date = object.getString("invoice_due_date");
            schedule_on = object.getString("invoice_schedule_date");
            late_feeId = object.getString("late_fee_id");
            invoiceNoTV.setText(invoice_no);
            invoice_dateTV.setText(invoice_date);


        } catch (JSONException e) {
            e.printStackTrace();
        }


    }


}

