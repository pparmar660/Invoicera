package com.invoicera.androidapp;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.invoicera.CustomView.CustomPopup;
import com.invoicera.Database.DatabaseHelper;
import com.invoicera.GlobalData.Constant;
import com.invoicera.InterFace.PopUpResult;
import com.invoicera.InterFace.WebApiResult;
import com.invoicera.Utility.Validation;
import com.invoicera.Webservices.WebRequest;

import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Locale;

/**
 * Created by vinove on 12/10/15.
 */
public class AutoBillingActivity extends BaseActivity implements View.OnClickListener, CompoundButton.OnCheckedChangeListener, WebApiResult, PopUpResult {
    // UI Variable
    LinearLayout ly_AutoBill;
    ImageView img_Back, img_Remove;
    CheckBox chk_Own, chk_Client;
    EditText et_Payment, et_FirstName, et_LastName, et_CardName, et_Address, et_Country, et_City, et_State, et_Zip, et_CardType, et_CardNo, et_Cvv, et_Expiry;
    Button btn_Save;
    String countryId, paymentGatewayId;

    // Other Variable
    String bill_option;
    Calendar myCalendar;
    DatePickerDialog.OnDateSetListener myDate;
    String selectQuery;
    WebRequest request;
    Cursor cursor;
    ArrayList<HashMap<String, String>> paymentGatewayList;
    ArrayList<HashMap<String, String>> creditCardList;
    ArrayList<HashMap<String, String>> countryList;
    CustomPopup myPopUp;
    public Comparator<HashMap<String, String>> mapComparator;
    boolean isShowProgressBar = false, updatePopUp;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.auto_billing);

        ly_AutoBill = (LinearLayout) findViewById(R.id.ly_AutoBill);

        img_Back = (ImageView) findViewById(R.id.img_back);
        img_Remove = (ImageView) findViewById(R.id.img_remove);

        chk_Own = (CheckBox) findViewById(R.id.chk_Own);
        chk_Client = (CheckBox) findViewById(R.id.chk_Client);

        et_Payment = (EditText) findViewById(R.id.paymentGateway);
        et_FirstName = (EditText) findViewById(R.id.et_FirstName);
        et_LastName = (EditText) findViewById(R.id.et_LastName);
        et_CardName = (EditText) findViewById(R.id.et_CardName);
        et_Address = (EditText) findViewById(R.id.et_Address);
        et_Country = (EditText) findViewById(R.id.et_Country);
        et_City = (EditText) findViewById(R.id.et_City);
        et_State = (EditText) findViewById(R.id.et_State);
        et_Zip = (EditText) findViewById(R.id.et_Zip);
        et_CardType = (EditText) findViewById(R.id.et_CardType);
        et_CardNo = (EditText) findViewById(R.id.et_CardNo);
        et_Cvv = (EditText) findViewById(R.id.et_Cvv);
        et_Expiry = (EditText) findViewById(R.id.et_Expiry);

        btn_Save = (Button) findViewById(R.id.btn_Save);


        img_Back.setOnClickListener(this);
        btn_Save.setOnClickListener(this);
        et_Expiry.setOnClickListener(this);

        chk_Own.setOnCheckedChangeListener(this);
        chk_Client.setOnCheckedChangeListener(this);
        et_Country.setOnClickListener(this);
        et_Payment.setOnClickListener(this);
        et_CardType.setOnClickListener(this);

        myCalendar = Calendar.getInstance();
        myDate = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int year, int monthOfYear,
                                  int dayOfMonth) {
                // TODO Auto-generated method stub
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, monthOfYear);
                myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);

                updateFields();
            }

        };
    }

    private void updateFields() {
        String myFormat = "yyyy-MM-dd";
        SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);
        et_Expiry.setText(sdf.format(myCalendar.getTime()));
    }

    @Override
    public void onClick(View v) {
        JSONObject obj = new JSONObject();
        switch (v.getId()) {

            case R.id.img_back:
                finish();
                break;

            case R.id.btn_Save:
                if (checkValidation()) {

                    Intent intent = new Intent();

                    intent.putExtra("detail_option", bill_option);
                    intent.putExtra("payment_gateway", et_Payment.getText().toString());
                    intent.putExtra("first_name", et_FirstName.getText().toString());
                    intent.putExtra("last_name", et_LastName.getText().toString());
                    intent.putExtra("name_on_card", et_CardName.getText().toString());
                    intent.putExtra("address", et_Address.getText().toString());
                    intent.putExtra("country", et_Country.getText().toString());
                    intent.putExtra("city", et_City.getText().toString());
                    intent.putExtra("state", et_State.getText().toString());
                    intent.putExtra("zip", et_Zip.getText().toString());
                    intent.putExtra("card_type", et_CardType.getText().toString());
                    intent.putExtra("card_number", et_CardNo.getText().toString());
                    intent.putExtra("cvv", et_Cvv.getText().toString());
                    intent.putExtra("expiry_date", et_Expiry.getText().toString());

                    setResult(1, intent);

                    finish();

                }
                break;

            case R.id.et_Expiry:
                new DatePickerDialog(this, myDate, myCalendar.get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                        myCalendar.get(Calendar.DAY_OF_MONTH)).show();
                break;

            case R.id.et_Country:

                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_ListCountry;

                cursor = db.getRecords(selectQuery);
                countryList = new ArrayList<>();


                if (cursor.moveToFirst() && cursor.getCount() > 0) {

                    showCountryList();

                } else {


                    try {
                        obj.put(Constant.KEY_METHOD, "listCountry");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    request = new WebRequest(context, obj,
                            Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_COUNTRY_LIST, Constant.token, this, true);
                    request.execute();
                }

                break;
            case R.id.paymentGateway:

                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_PaymentGateways;
                cursor = db.getRecords(selectQuery);
                if (cursor.moveToFirst() && cursor.getCount() > 0) {
                    paymentGatewayList = new ArrayList<>();
                    for (int i = 0; i < cursor.getCount(); i++) {
isShowProgressBar=false;
                        try {
                            HashMap<String, String> map;

                            JSONObject object = new JSONObject(cursor.getString(cursor
                                    .getColumnIndex(DatabaseHelper.JSON_DATA)));

                            for (int k = 0; k < object.getJSONArray("PaymentGateway").length(); k++) {
                                map = new HashMap<>();
                                JSONObject chargeObj = object.getJSONArray("PaymentGateway").getJSONObject(k);
                                map.put(Constant.KEY_ID, chargeObj.getString("id"));
                                map.put(Constant.KEY_NAME, chargeObj.getString("PaymentGatewayName"));

                                if (chargeObj.getString("PaymentGatewayCategory").equalsIgnoreCase("AutoBill"))
                                    paymentGatewayList.add(map);
                            }


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                        if (myPopUp != null)
                            if (myPopUp.isShowing())
                                myPopUp.dismiss();


                        myPopUp = new CustomPopup((Activity) context, paymentGatewayList, Constant.POP_UP.PAYMENT_GATEWAY, true, this, "Select Payment method");

                        myPopUp.show();
                    }
                } else isShowProgressBar = true;


                try {
                    obj.put(Constant.KEY_METHOD, "getUserGblPaymentGateways");
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                request = new WebRequest(context, obj,
                        Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_PAYMENT_LIST, Constant.token, this, isShowProgressBar);
                request.execute();

                break;

            case R.id.et_CardType:
                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_CreditCardType;
                cursor = db.getRecords(selectQuery);
                if (cursor.moveToFirst() && cursor.getCount() > 0) {
                    isShowProgressBar=false;
                    creditCardList = new ArrayList<>();
                    for (int i = 0; i < cursor.getCount(); i++) {

                        try {
                            HashMap<String, String> map;

                            JSONObject object = new JSONObject(cursor.getString(cursor
                                    .getColumnIndex(DatabaseHelper.JSON_DATA)));

                            for (int k = 0; k < object.getJSONArray("CreditCardType").length(); k++) {
                                map = new HashMap<>();
                                JSONObject chargeObj = object.getJSONArray("CreditCardType").getJSONObject(k);
                                map.put(Constant.KEY_ID, chargeObj.getString("fkCreditCardID"));
                                map.put(Constant.KEY_NAME, chargeObj.getString("CreditCardTitle"));


                                creditCardList.add(map);
                            }


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                        if (myPopUp != null)
                            if (myPopUp.isShowing())
                                myPopUp.dismiss();


                        myPopUp = new CustomPopup((Activity) context, paymentGatewayList, Constant.POP_UP.CREDIT_CARD_TYPE, true, this, "Select Credit Card");

                        myPopUp.show();
                    }
                } else isShowProgressBar = true;


                try {
                    obj.put(Constant.KEY_METHOD, "listRecurringCardType");
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                request = new WebRequest(context, obj,
                        Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_CREDIT_CARD_TYPE, Constant.token, this, isShowProgressBar);
                request.execute();

                break;

        }

    }

    public void showCountryList() {


        selectQuery = "Select " + DatabaseHelper.JSON_DATA
                + " From " + DatabaseHelper.Table_ListCountry;

        cursor = db.getRecords(selectQuery);
        countryList = new ArrayList<>();
        if (cursor.moveToFirst() && cursor.getCount() > 0)

        {
            for (int i = 0; i < cursor.getCount(); i++) {

                try {
                    HashMap<String, String> map;

                    JSONObject object = new JSONObject(cursor.getString(cursor
                            .getColumnIndex(DatabaseHelper.JSON_DATA)));

                    for (int k = 0; k < object.getJSONArray("countryList").length(); k++) {
                        map = new HashMap<>();
                        JSONObject chargeObj = object.getJSONArray("countryList").getJSONObject(k);
                        map.put(Constant.KEY_ID, chargeObj.getString("id"));
                        map.put(Constant.KEY_CountryCode, chargeObj.getString("CountryCode"));
                        map.put(Constant.KEY_CountryName, chargeObj.getString("CountryName"));


                        countryList.add(map);
                    }


                } catch (JSONException e) {
                    e.printStackTrace();
                }
                if (myPopUp != null)
                    if (myPopUp.isShowing())
                        myPopUp.dismiss();


                mapComparator = new Comparator<HashMap<String, String>>() {
                    public int compare(HashMap<String, String> m1, HashMap<String, String> m2) {
                        return m1.get(Constant.KEY_CountryName).compareTo(m2.get(Constant.KEY_CountryName));
                    }
                };

                Collections.sort(countryList, mapComparator);


                myPopUp = new CustomPopup((Activity) context, countryList, Constant.POP_UP.COUNTRY, false, this, "Select Country");

                myPopUp.show();
            }
        }
    }


    private boolean checkValidation() {
        boolean valid_return = true;

        if (!Validation.hasText(et_FirstName, "Please enter first name"))
            return false;
        if (!Validation.hasText(et_LastName, "Please enter last name"))
            return false;
        if (!Validation.hasText(et_CardName, "Please enter name on card"))
            return false;
        if (!Validation.hasText(et_Address, "Please enter address"))
            return false;
        if (!Validation.hasText(et_City, "Please enter city"))
            return false;
        if (!Validation.hasText(et_State, "Please enter state"))
            return false;
        if (!Validation.hasText(et_Zip, "Please enter zip code"))
            return false;
        if (!Validation.hasText(et_CardNo, "Please enter card number"))
            return false;
        if (!Validation.hasText(et_Cvv, "Please enter cvv number"))
            return false;
        if (!Validation.hasText(et_Expiry, "Please select expiry date"))
            return false;

        return valid_return;

    }

    @Override
    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
        switch (buttonView.getId()) {
            case R.id.chk_Own:
                if (chk_Own.isChecked()) {
                    chk_Client.setChecked(false);
                    ly_AutoBill.setVisibility(View.VISIBLE);
                    bill_option = "Own";
                }
                break;

            case R.id.chk_Client:
                if (chk_Own.isChecked()) {
                    chk_Client.setChecked(false);
                    ly_AutoBill.setVisibility(View.GONE);
                    bill_option = "Client";
                }
                break;
        }

    }

    @Override
    public void getWebResult(Constant.SERVICE_TYPE type, JSONObject result) {

        HashMap<String, String> map = new HashMap<>();
        if (result == null)
            return;
        try {
            if (!result.getString("code").equalsIgnoreCase("200")) {
                if (result.has("message"))
                    Toast.makeText(context, result.getString("message").toString(), Toast.LENGTH_SHORT).show();
                return;
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        ;

        ContentValues values = null;
        switch (type) {


            case GET_COUNTRY_LIST:


                db.ClearTable(DatabaseHelper.Table_ListCountry);
                values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString());
                db.insert(DatabaseHelper.Table_ListCountry, values);
                showCountryList();

                break;

            case GET_PAYMENT_LIST:
                db.ClearTable(DatabaseHelper.Table_PaymentGateways);

                values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString());
                db.insert(DatabaseHelper.Table_PaymentGateways, values);

                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_PaymentGateways;
                cursor = db.getRecords(selectQuery);


                if (cursor.moveToFirst() && cursor.getCount() > 0) {
                    paymentGatewayList = new ArrayList<>();
                    for (int i = 0; i < cursor.getCount(); i++) {

                        try {


                            JSONObject object = new JSONObject(cursor.getString(cursor
                                    .getColumnIndex(DatabaseHelper.JSON_DATA)));

                            for (int k = 0; k < object.getJSONArray("PaymentGateway").length(); k++) {
                                map = new HashMap<>();
                                JSONObject chargeObj = object.getJSONArray("PaymentGateway").getJSONObject(k);
                                map.put(Constant.KEY_ID, chargeObj.getString("id"));
                                map.put(Constant.KEY_NAME, chargeObj.getString("PaymentGatewayName"));

                                if (chargeObj.getString("PaymentGatewayCategory").equalsIgnoreCase("AutoBill"))
                                    paymentGatewayList.add(map);
                            }


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                        if (myPopUp != null)
                            if (myPopUp.isShowing())
                                updatePopUp = true;


                        if (updatePopUp)
                            myPopUp.updateList(false, paymentGatewayList);
                        else {

                            myPopUp = new CustomPopup((Activity) context, paymentGatewayList, Constant.POP_UP.PAYMENT_GATEWAY, false, this, "Select Payment method");
                            myPopUp.show();

                        }
                    }
                }


                break;
            case GET_CREDIT_CARD_TYPE:
                db.ClearTable(DatabaseHelper.Table_CreditCardType);

                values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString());
                db.insert(DatabaseHelper.Table_CreditCardType, values);

                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_CreditCardType;
                cursor = db.getRecords(selectQuery);
                if (cursor.moveToFirst() && cursor.getCount() > 0) {
                    creditCardList = new ArrayList<>();
                    for (int i = 0; i < cursor.getCount(); i++) {

                        try {


                            JSONObject object = new JSONObject(cursor.getString(cursor
                                    .getColumnIndex(DatabaseHelper.JSON_DATA)));

                            for (int k = 0; k < object.getJSONArray("CreditCardType").length(); k++) {
                                map = new HashMap<>();
                                JSONObject chargeObj = object.getJSONArray("CreditCardType").getJSONObject(k);
                                map.put(Constant.KEY_ID, chargeObj.getString("fkCreditCardID"));
                                map.put(Constant.KEY_NAME, chargeObj.getString("CreditCardTitle"));


                                creditCardList.add(map);
                            }


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                        if (myPopUp != null)
                            if (myPopUp.isShowing())
                                updatePopUp = true;


                        if (updatePopUp)
                            myPopUp.updateList(false, paymentGatewayList);
                        else {

                            myPopUp = new CustomPopup((Activity) context, creditCardList, Constant.POP_UP.CREDIT_CARD_TYPE, false, this, "Select Credit Card");
                            myPopUp.show();

                        }
                    }
                }




                break;
        }


    }

    @Override
    public void getPopUpResult(Constant.POP_UP type, int pos, boolean clear) {

        switch (type) {
            case COUNTRY:
                et_Country.setText(countryList.get(pos).get("CountryName"));
                countryId = countryList.get(pos).get("id");
                break;
            case PAYMENT_TERM:
                paymentGatewayId = paymentGatewayList.get(pos).get("id");
                et_Payment.setText(paymentGatewayList.get(pos).get(Constant.KEY_NAME));

                break;
            case  CREDIT_CARD_TYPE:
                et_CardType.setText(creditCardList.get(pos).get(Constant.KEY_NAME));


        }
    }
}
