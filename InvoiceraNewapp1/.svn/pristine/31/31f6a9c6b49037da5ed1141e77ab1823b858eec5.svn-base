package com.invoicera.Fragment;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import com.invoicera.CustomView.FloatingAction;
import com.invoicera.Database.DatabaseHelper;
import com.invoicera.GlobalData.Constant;
import com.invoicera.InterFace.WebApiResult;
import com.invoicera.ListViewAdpter.RecurringListPagerFragmentListAdapter;
import com.invoicera.Utility.MyDateFormat;
import com.invoicera.Webservices.DownloadPdfFile;
import com.invoicera.Webservices.WebRequest;
import com.invoicera.androidapp.Home;
import com.invoicera.androidapp.R;
import com.invoicera.androidapp.Recurring_Filter;
import com.invoicera.listener.FragmentChanger;
import com.invoicera.model.RecurringAttribute;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionButton;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionLayout;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RFACLabelItem;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RapidFloatingActionContentLabelList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

/**
 * Created by vinove on 25/9/15.
 */
public class RecurringList extends BaseFragment implements WebApiResult, View.OnClickListener,
        RapidFloatingActionContentLabelList.OnRapidFloatingActionContentLabelListListener {


    boolean isTotalRecordGet = false;
    int total_pagesInt = 0;
    public ImageView searchCancelImg;
    public RelativeLayout actionRelative;
    public TableLayout actionTable;
    public ImageView closeActionPopUp;
    public ListView listView;
    int pageNo;
    View listFooter;
    RecurringListPagerFragmentListAdapter adapter;
    private SwipeRefreshLayout swipeContainer;
    WebApiResult webApiResult;
    private RapidFloatingActionLayout rfaLayout;
    private RapidFloatingActionButton rfaButton;
    RapidFloatingActionContentLabelList rfaContent;
    public boolean isSearchEnable = false;
    public boolean isFilterEnable = false;

    public TextView RecurringNoTV;
    TableRow startRecurring, stopRecurring, edit, exportPdf, sendRecurring, markArchive, active, delete;

    public String recurringId;
    public static int position = 0;
    int recordPerPage = 100;
    boolean isLoading = false;


    View view;
    TextView filterRecurring, recurringNoTV;
    public EditText searchEt;
    WebRequest request;

    FloatingAction floatingAction;
    public boolean isActionPopOpen = false;


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        final View view = inflater.inflate(R.layout.recurring_list_fragment, container, false);
        swipeContainer = (SwipeRefreshLayout) view.findViewById(R.id.swipe_container);
        position = getArguments().getInt(Constant.FRAGMENT_POS);

        Home.toolbarText.setText("Recurring");

        try {
            getRecurringList(1, Constant.SERVICE_TYPE.GET_DATA, false);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        listView = (ListView) view.findViewById(R.id.list);

        searchEt = (EditText) view.findViewById(R.id.searchEdit);
        filterRecurring = (TextView) view.findViewById(R.id.filter_recurring);
        recurringNoTV = (TextView) view.findViewById(R.id.recurringNo);

        searchCancelImg = (ImageView) view.findViewById(R.id.searchCancel);
        actionTable = (TableLayout) view.findViewById(R.id.actionTable);
        searchCancelImg.setOnClickListener(this);
        closeActionPopUp = (ImageView) view.findViewById(R.id.closeAction);
        actionRelative = (RelativeLayout) view.findViewById(R.id.actionRelative);
        LayoutInflater footerInflater = LayoutInflater.from(getActivity());
        listFooter = footerInflater.inflate(R.layout.list_footer, null, false);
        listFooter.setVisibility(View.GONE);

        adapter = new RecurringListPagerFragmentListAdapter(context);
        listView.setAdapter(adapter);
        listView.addFooterView(listFooter);
        listFooter.setOnClickListener(null);

        RecurringNoTV = (TextView) view.findViewById(R.id.recurringNo);


        startRecurring = (TableRow) view.findViewById(R.id.startLinear);
        stopRecurring = (TableRow) view.findViewById(R.id.stop_recurringlinear);
        edit = (TableRow) view.findViewById(R.id.editlinear);
        exportPdf = (TableRow) view.findViewById(R.id.exportPdflinear);

        sendRecurring = (TableRow) view.findViewById(R.id.send_recurringlinear);
        markArchive = (TableRow) view.findViewById(R.id.archiveLinear);
        active = (TableRow) view.findViewById(R.id.activelinear);
        delete = (TableRow) view.findViewById(R.id.deleteLinear);


        webApiResult = this;


        startRecurring.setOnClickListener(this);
        stopRecurring.setOnClickListener(this);
        edit.setOnClickListener(this);
        exportPdf.setOnClickListener(this);
        sendRecurring.setOnClickListener(this);
        markArchive.setOnClickListener(this);
        active.setOnClickListener(this);
        delete.setOnClickListener(this);


        searchCancelImg.setVisibility(View.GONE);

        // indicator.setViewPager(pager);  pager.setOnPageChangeListener(this);
        //    createModuleImg = (ImageView) view.findViewById(R.id.createModule);
        //  createModuleImg.setOnClickListener(this);

        filterRecurring.setOnClickListener(this);
        searchEt.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                    try {
                        isSearchEnable = true;

                        getSearchedRecurringList(searchEt.getText().toString(), pageNo, Constant.SERVICE_TYPE.GET_SEARCH_DATA, true, "0");
                        searchCancelImg.setVisibility(View.VISIBLE);
                        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
                        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);

                    } catch (Exception e) {

                        Log.i("exception", e.getMessage());

                    }
                    return true;
                }
                return false;
            }
        });

        swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {

                try {

                    if (isSearchEnable) {
                        isSearchEnable = false;
                        searchCancelImg.setVisibility(View.GONE);
                    }
                    if (isFilterEnable)
                        isFilterEnable = false;

                    pageNo = 1;
                    getRecurringList(pageNo, Constant.SERVICE_TYPE.GET_DATA, false);
                } catch (JSONException e) {

                    e.printStackTrace();
                }
            }
        });

        swipeContainer.setColorSchemeResources(android.R.color.holo_orange_dark, android.R.color.holo_green_light, android.R.color.holo_blue_bright, android.R.color.holo_red_light);


        ///floating tap-------------
        rfaContent = new RapidFloatingActionContentLabelList(context);
        rfaButton = (RapidFloatingActionButton) view.findViewById(R.id.label_list_sample_rfab);
        rfaLayout = (RapidFloatingActionLayout) view.findViewById(R.id.label_list_sample_rfal);

        rfaContent.setOnRapidFloatingActionContentLabelListListener(this);
        floatingAction = new FloatingAction(context, fragmentChanger, rfaLayout, rfaButton, rfaContent);


        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {


                if (position >= adapter.RecurringList.size()) return;
                Bundle arguments = new Bundle();
                System.out.println("Id1:" + adapter.RecurringList.get(position).getRecurring_id());
                arguments.putString(Constant.KEY_RECURRING_ID, adapter.RecurringList.get(position).getRecurring_id());
                arguments.putString(Constant.KEY_RECURRING_STATUS, adapter.RecurringList.get(position).getStatus());
                arguments.putInt(Constant.KEY_POSITION, 1);

                if (global.isNetworkAvailable()) {
                    fragmentChanger.onFragmentAddWithBackStack(new RecurringPreviewCreateFragment(), Constant.RecurringPreviewCreateFragmentTag, arguments);
                } else global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);

            }
        });

        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                if (!global.isNetworkAvailable()) {
                    global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);
                    return true;
                }

                isActionPopOpen = true;
                actionRelative.setVisibility(View.VISIBLE);
                String recurringId = adapter.RecurringList.get(position).getRecurring_id();
                recurringNoTV.setText("Recurring no : " + adapter.RecurringList.get(position).getRecurring_no());
                position = position;

                if (adapter.RecurringList.get(position).getStatus().equalsIgnoreCase("Cancel") ||
                        adapter.RecurringList.get(position).getStatus().equalsIgnoreCase("Deleted")) {
                    active.setVisibility(View.GONE);

                } else if (adapter.RecurringList.get(position).getStatus().equalsIgnoreCase("Archived")) {
                    active.setVisibility(View.VISIBLE);

                } else {
                    active.setVisibility(View.VISIBLE);
                }

                animation(actionTable, R.anim.bottom_up, Constant.LIST_ACTION_ANIMATION_TYPE.OPEN);


                return true;


            }
        });


        listView.setOnScrollListener(new AbsListView.OnScrollListener() {

            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {

                int currentScrollState = scrollState;


            }


            @Override
            public void onScroll(AbsListView view, int firstVisibleItem,
                                 int visibleItemCount, int totalItemCount) {


                if ((firstVisibleItem + visibleItemCount == totalItemCount)
                        && !isLoading && (visibleItemCount != totalItemCount)) {


                    try {

                        if (isSearchEnable)
                            return;
                        if (isFilterEnable) {

                            return;
                        }

                        if (!global.isNetworkAvailable()) {
                            global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);
                            return;
                        }
                        if (isTotalRecordGet)
                            return;

                        if (pageNo + 1 > total_pagesInt) {
                            global.showAlert("No more record", context);
                            return;
                        }


                        listFooter.setVisibility(View.VISIBLE);
                        isLoading = true;

                        try {

                            ++pageNo;
                            getRecurringList(pageNo, Constant.SERVICE_TYPE.GET_DATA, false);

                        } catch (JSONException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }


                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });


        if (position == 0)
            setList();
        return view;
    }


    @Override
    public void setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);
        if (isVisibleToUser) {
            Log.e("visible ", position + "");
            setList();
        }
    }

    public void setList() {

        if (db == null)
            return;
        String selectQuery = "Select " + DatabaseHelper.JSON_DATA + " from " + DatabaseHelper.Table_RecurringList;

        Cursor cursor = db.getRecords(selectQuery);
      /*  Toast.makeText(
                context,
                "cusror Length " + position + "," + cursor.getCount() + ","
                        + cursor.moveToFirst(), Toast.LENGTH_SHORT).show();*/
        try {
            if (cursor.moveToFirst() && cursor.getCount() > 0) {
                for (int i = 0; i < cursor.getCount(); i++) {


                    updateUI(new JSONObject(cursor.getString(cursor.getColumnIndex(DatabaseHelper.JSON_DATA))));
                    pageNo = 1;

                    getRecurringList(pageNo, Constant.SERVICE_TYPE.GET_DATA, false);

                }
            } else {
                pageNo = 1;
                getRecurringList(pageNo, Constant.SERVICE_TYPE.GET_DATA, true);

            }

        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    private void getRecurringList(int page_no, Constant.SERVICE_TYPE type, boolean showProcessing) throws JSONException {

        JSONObject obj = new JSONObject();


        JSONObject filter = new JSONObject();
        filter.put("client_id", "");
        filter.put("date_from", "");
        filter.put("date_to", "");
        filter.put("recurring_number", "");
        filter.put("recurring_record_status", "");
        filter.put("recurring_status", "");
        filter.put("page", 1);
        filter.put("per_page_record", 10);

        obj.put(Constant.KEY_METHOD, "listRecurring");
        obj.put("filter", filter);
//        obj.put(Constant.KEY_PAGE_NO, page_no);
//        obj.put(Constant.KEY_PAGE_PER_REORD, recordPerPage);
//        obj.put(Constant.KEY_STATUS, "Active");

      /*  obj.put("client_id", "");
        obj.put("date_from", "");
        obj.put("date_to", "");
        obj.put("recurring_number", "");
        obj.put("recurring_record_status", "");
        obj.put("recurring_status", "");*/
//        obj.put("filter", obj);

        Home.progressBarHome.setVisibility(View.VISIBLE);

        request = new WebRequest(context, obj, Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_DATA, Constant.token, this, false);
        request.execute();
    }

    @Override
    public void onResume() {
        super.onResume();
        Log.e("onresume", "");
    }


    @Override
    public void onAttach(Activity activity) {
        fragmentChanger = (FragmentChanger) activity;
        super.onAttach(activity);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        System.out.println(requestCode + "," + resultCode + "," + data);
        if (requestCode == Constant.requestCodeRecurringFilter) {
            if (data == null)
                return;
            String Recurring_st = data.getStringExtra(Constant.KEY_RECURRING_STATUS);
            String status = data.getStringExtra(Constant.KEY_STATUS);
            String client_id = data.getStringExtra(Constant.KEY_CLIENT_ID);
            String from = data.getStringExtra(Constant.KEY_DATE_FROM);
            String to = data.getStringExtra(Constant.KEY_DATE_TO);

            JSONObject obj = null;
            try {
                obj = new JSONObject();
                obj.put(Constant.KEY_METHOD, "filterRecurring");
                obj.put(Constant.KEY_CLIENT_ID, client_id);
                obj.put(Constant.KEY_DATE_FROM, from);
                obj.put(Constant.KEY_PAGE_NO, 1);
                obj.put(Constant.KEY_PAGE_PER_REORD, 200);
                obj.put(Constant.KEY_DATE_TO, to);
                obj.put(Constant.KEY_RECURRING_STATUS, Recurring_st);
                obj.put(Constant.KEY_STATUS, status);

            } catch (JSONException e) {
                e.printStackTrace();
            }


            WebRequest request = new WebRequest(context, obj, Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_FILTER_DATA, Constant.token, this, true);

            if (global.isNetworkAvailable()) {
                isFilterEnable = true;
                request.execute();
            } else
                global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);


        }
        if (requestCode == Constant.requestCodeOffLinePaymentFromList) {

            Bundle arguments = new Bundle();
            arguments.putString(Constant.KEY_RECURRING_ID, recurringId);
            arguments.putInt(Constant.KEY_POSITION, 1);

            if (global.isNetworkAvailable()) {

                fragmentChanger.onFragmentReplace(new RecurringList(), new Bundle());
            }
        }
    }


    public void getSearchedRecurringList(String searchText, int page_no, Constant.SERVICE_TYPE type, boolean showProcessing, String recurring_status)
            throws JSONException {

        JSONObject obj = new JSONObject();

        obj.put(Constant.KEY_METHOD, "searchRecurring");
        obj.put(Constant.KEY_PAGE_NO, page_no);
        obj.put(Constant.KEY_PAGE_PER_REORD, 200);
        obj.put(Constant.KEY_STATUS, "");
        obj.put(Constant.KEY_RECURRING_STATUS, recurring_status);
        obj.put("searchText", searchText);

        WebRequest request = new WebRequest(context, obj, Constant.invoicelistURL, type, Constant.token, this, showProcessing);
        if (global.isNetworkAvailable())
            request.execute();
        else
            global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);
    }


    @Override
    public void onClick(View v) {

        JSONObject jsonObject = new JSONObject();
        JSONObject jsonData = new JSONObject();
        Intent i;
        switch (v.getId()) {


            case R.id.searchCancel:
                isSearchEnable = false;
                searchCancelImg.setVisibility(View.GONE);
                searchEt.setText("");

                break;

            case R.id.filter_recurring:
                i = new Intent(context, Recurring_Filter.class);
//                i.putExtra(Constant.KEY_INVOICE_STATUS, content[selectedPagePosition]);

                getActivity().startActivityForResult(i, Constant.requestCodeRecurringFilter);// Activity

                break;

            case R.id.delete:
                DeleteRecurringAlertDialog();
                break;

            case R.id.archive:
                break;


            case R.id.exportPdf:
                break;

            case R.id.active:
                break;
        }
    }


    @Override
    public void onPause() {
        super.onPause();
        Log.e("pause", "");

    }

    @Override
    public void getWebResult(Constant.SERVICE_TYPE type, JSONObject result) {
        listFooter.setVisibility(View.GONE);
        if (result == null)
            return;
        try {
            if (!result.getString("code").equalsIgnoreCase("200")) {
                if (isSearchEnable) {
                    isSearchEnable = false;
                    searchCancelImg.setVisibility(View.GONE);
                    searchEt.setText("");
                }

                if (isFilterEnable)
                    isFilterEnable = false;

                if (result.has("message"))
                    Toast.makeText(context, result.getString("message").toString(), Toast.LENGTH_SHORT).show();
                return;

            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        ContentValues values;
        swipeContainer.setRefreshing(false);

        switch (type) {

            case GET_DATA:


                try {
                    if (pageNo == 1) {


                        db.ClearTable(DatabaseHelper.Table_RecurringList);


                        values = new ContentValues();
                        values.put(DatabaseHelper.JSON_DATA, result.toString()); // Contact

                        db.insert(DatabaseHelper.Table_RecurringList, values);


                        String selectQuery = "Select " + DatabaseHelper.JSON_DATA +
                                " From " + DatabaseHelper.Table_RecurringList;

                        Cursor cursor = db.getRecords(selectQuery);

                        if (cursor.moveToFirst() && cursor.getCount() > 0)
                            for (int i = 0; i < cursor.getCount(); i++) {
                                updateUI(new JSONObject(cursor.getString(cursor.getColumnIndex(DatabaseHelper.JSON_DATA))));
                            }

                    } else {
                        isLoading = false;
                        updateUI(result);

                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            case GET_SEARCH_DATA:

                break;

            case GET_FILTER_DATA:

                break;

            case DELETE:

                break;

            case ARCHIVE:

                break;

            case ACTIVE:

                break;
            case EXPORT_PDF:

                try {
                    String pdfUrl = result.getString("pdfUrl");
                    pdfUrl.replace("\\", "");
                    new DownloadPdfFile(context).downloadAndOpenPDF(pdfUrl);

                } catch (JSONException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

                break;
            case SEND:
                try {
                    global.showAlert(result.getString("message"), context);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                break;

        }
    }

    private void updateUI(JSONObject jsonreturn) {
        if (pageNo == 1)
            adapter.RecurringList = new ArrayList<>();

        try {
            JSONArray recurring = jsonreturn.getJSONObject("recurrings").getJSONArray("recurring");

//            JSONObject attributes = jsonreturn.getJSONObject("recurrings").getString("total_pages");

            String total_pages = jsonreturn.getJSONObject("recurrings").getString("total_pages");

            try {
                total_pagesInt = Integer.parseInt(total_pages);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
            if (pageNo == total_pagesInt)
                isTotalRecordGet = true;

            for (int i = 0; i < recurring.length(); i++) {
                JSONObject c = recurring.getJSONObject(i);
                JSONObject client = c.getJSONObject(Constant.KEY_CLIENT);
                RecurringAttribute atribute = new RecurringAttribute();

                atribute.setOrganization(client.getString(Constant.KEY_ORGANIZATION));
                atribute.setRecurring_id(c.getString("number"));
                atribute.setDate(MyDateFormat.GetDate(c.getString(Constant.KEY_DATE)));
                atribute.setSent(c.getString("total_sent"));


                if (c.has("recurring_status"))
                    atribute.setStatus(c.getString("recurring_status"));
                atribute.setFrequency(c.getString("frequency"));
                atribute.setOccurrence(c.getString("occurence"));
                atribute.setNet_balance(c.getString("TotalAmount"));
                atribute.setCurrency(c.getString(Constant.KEY_CURRENCY));

                adapter.add(atribute);
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    public void DeleteRecurringAlertDialog() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(context);
        alertDialog.setTitle(Constant.title);
        alertDialog.setMessage(Constant.delete_message);
        alertDialog.setPositiveButton("YES", new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {

        /*        JSONObject jsonObject = new JSONObject();
                JSONObject jsonData = new JSONObject();
                JSONArray invoiceIdsArray;
                try {

                    invoiceIdsArray = new JSONArray();
                    invoiceIdsArray.put(invoiceId);
                    jsonObject.put(Constant.KEY_INVOICE_STATUS, content[selectedPagePosition]);
                    jsonObject.put(Constant.KEY_STATUS, "Active");
                    jsonObject.put("invoice_id", invoiceIdsArray);
                    jsonObject.put("type", "Cancel");// Cancel - >delete ,
                    jsonData.put("changeInvoiceStatus", jsonObject);
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                request = new WebRequest(context, jsonData, Constant.invoicelistURL, Constant.SERVICE_TYPE.DELETE, Constant.token, webApiResult, true);
                if (global.isNetworkAvailable())
                    request.execute();
                else
                    global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);*/

            }
        });
        alertDialog.setNegativeButton("NO",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        dialog.cancel();
                    }
                });
        alertDialog.show();
    }

    @Override
    public void onRFACItemLabelClick(int position, RFACLabelItem item) {
        floatingAction.createFunction(position);

    }

    @Override
    public void onRFACItemIconClick(int position, RFACLabelItem item) {
        floatingAction.createFunction(position);
    }

    public void animation(TableLayout layout, int animationId, final Constant.LIST_ACTION_ANIMATION_TYPE type) {

        android.view.animation.Animation animationInfo;

        animationInfo = AnimationUtils.loadAnimation(getActivity().getApplicationContext(),
                animationId);

        animationInfo.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {

                switch (type) {

                    case OPEN:


                        break;
                    case CLOSE:
                        isActionPopOpen = false;

                        actionRelative.setVisibility(View.GONE);


                        break;

                }

            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });

        layout.startAnimation(animationInfo);


    }
}