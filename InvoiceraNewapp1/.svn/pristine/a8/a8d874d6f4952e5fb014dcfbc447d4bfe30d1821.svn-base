package com.invoicera.ViewPagerFragment;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.invoicera.Database.DatabaseHelper;
import com.invoicera.Fragment.InvoicePreviewCreateFragment;
import com.invoicera.GlobalData.Constant;
import com.invoicera.InterFace.WebApiResult;
import com.invoicera.Utility.MyDateFormat;
import com.invoicera.Webservices.WebRequest;
import com.invoicera.androidapp.R;
import com.invoicera.model.ItemTaxModel;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;


public class PreviewInvoicePagerFragment extends InvoicePreviewCreateFragment implements WebApiResult {
    DatabaseHelper db;
    ContentValues values;
    TextView senderNameTV, senderAddressTV, senderPhoneTV, invoiceNoTV, dateTV;
    TextView clientNameTV, clientAddTV, clientPhoneTV, asubtotalTV, InvoiceTotleTV, outstandingTV, amountPaidTV, netBalanceTV, discountTV, balanceAfterDiscountTV;
    TableLayout itemTable;
    ImageView logoImage;
    LinearLayout taxLinear, invoiceTotleLinear, discountLinear, additionalChargeLinear, amountPaidLiner, outstandingLiner, netbalanceLiner;
    ArrayList<ItemTaxModel> taxModelsList;

    @Override
    public View onCreateView(LayoutInflater inflater,
                             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        // TODO Auto-generated method stub

        View view = inflater.inflate(R.layout.invoice_preview, container, false);

        System.out.println("Id3:" + invoice_id);
        if (invoice_id != null)
            if (!invoice_id.isEmpty())
                getInvoicedata(invoice_id);
        db = new DatabaseHelper(context);


        senderAddressTV = (TextView) view.findViewById(R.id.senderAddress);
        senderNameTV = (TextView) view.findViewById(R.id.senderName);
        senderPhoneTV = (TextView) view.findViewById(R.id.senderNumber);
        invoiceNoTV = (TextView) view.findViewById(R.id.invoiceNumber);

        outstandingTV = (TextView) view.findViewById(R.id.outstandingValue);
        amountPaidTV = (TextView) view.findViewById(R.id.amoutpaid);
        netBalanceTV = (TextView) view.findViewById(R.id.netbalance);
        discountTV = (TextView) view.findViewById(R.id.discountvalue);
        balanceAfterDiscountTV = (TextView) view.findViewById(R.id.valueAfterDiscount);


        dateTV = (TextView) view.findViewById(R.id.date);
        clientNameTV = (TextView) view.findViewById(R.id.clientName);
        clientAddTV = (TextView) view.findViewById(R.id.clientAddress);
        clientPhoneTV = (TextView) view.findViewById(R.id.ClientNumber);
        itemTable = (TableLayout) view.findViewById(R.id.itemTable);
        logoImage = (ImageView) view.findViewById(R.id.logo);
        taxLinear = (LinearLayout) view.findViewById(R.id.itemTaxLinear);
        asubtotalTV = (TextView) view.findViewById(R.id.subtotleValue);
        InvoiceTotleTV = (TextView) view.findViewById(R.id.invoicetotleValue);
        invoiceTotleLinear = (LinearLayout) view.findViewById(R.id.invoicetotaleLinear);

        discountLinear = (LinearLayout) view.findViewById(R.id.discountLinear);
        additionalChargeLinear = (LinearLayout) view.findViewById(R.id.addtionalChargeLinear);
        amountPaidLiner = (LinearLayout) view.findViewById(R.id.amountPaidLiner);
        outstandingLiner = (LinearLayout) view.findViewById(R.id.outstandingLiner);
        netbalanceLiner = (LinearLayout) view.findViewById(R.id.netBalanceLiner);


        taxModelsList = new ArrayList<>();
        return view;

    }


    public void getInvoicedata(String invoiceId) {


        JSONObject obj = null;
        try {
            obj = new JSONObject();

            obj.put(Constant.KEY_METHOD, "getInvoice");
            obj.put(Constant.KEY_INVOICE_ID, invoiceId);

        } catch (JSONException e) {
            e.printStackTrace();
        }


        WebRequest request = new WebRequest(context, obj,
                Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_DATA, this, true);
        request.execute();


    }


    @Override
    public void getWebResult(Constant.SERVICE_TYPE type, JSONObject result) {

        if (result == null)
            return;
        try {
            if (!result.getString("code").equalsIgnoreCase("200")) {
                if (result.has("message"))
                    Toast.makeText(context, result.getString("message").toString(), Toast.LENGTH_SHORT).show();
                return;

            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        switch (type) {

            case GET_DATA:
                db.ClearTable(DatabaseHelper.Table_GraphData);
                values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString()); // Contact

                db.insert(DatabaseHelper.Table_GraphData, values);


                String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_GraphData;

                Cursor cursor = db.getRecords(selectQuery);
                taxModelsList = new ArrayList<>();

                if (cursor.moveToFirst() && cursor.getCount() > 0) {


                    //totalItem = new ArrayList<>();
                    for (int i = 0; i < cursor.getCount(); i++) {

                        try {
                            JSONObject object = (new JSONObject
                                    (cursor.getString(cursor.getColumnIndex(db.JSON_DATA)))).getJSONObject("invoice");

                            clientNameTV.setText(object.getJSONObject("client").getString("client_name"));
                            clientAddTV.setText("Add :" + object.getJSONObject("client").getString("address"));
                            clientPhoneTV.setText("Ph :" + object.getJSONObject("client").getString("phone_number"));


                            senderNameTV.setText(object.getJSONObject("sender").getString("sender_name"));
                            senderAddressTV.setText(object.getJSONObject("sender").getString("address"));
                            senderPhoneTV.setText(object.getJSONObject("sender").getString("phone_number"));
                            dateTV.setText(MyDateFormat.GetDate(object.getString("date")));
                            invoiceNoTV.setText(object.getString("number"));

                            for (int j = 0; j < object.getJSONObject("items").getJSONArray("item").length(); j++) {

                                JSONObject itemObj = object.getJSONObject("items").getJSONArray("item").getJSONObject(j);

                                LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context
                                        .LAYOUT_INFLATER_SERVICE);
                                View itemView = inflater.inflate(R.layout.item_table_row, null);


                                TextView itemName = (TextView) itemView.findViewById(R.id.item_name);
                                TextView itemDescription = (TextView) itemView.findViewById(R.id.item_description);
                                TextView qtyAndUc = (TextView) itemView.findViewById(R.id.qty_uc);
                                TextView descount = (TextView) itemView.findViewById(R.id.discount);
                                TextView price = (TextView) itemView.findViewById(R.id.price);


                                itemName.setText(itemObj.getString("name"));
                                descount.setText(itemObj.getString("total_discountValue"));
                                price.setText(itemObj.getString("total_priceValue"));

                                if (itemObj.getString("description").isEmpty())
                                    itemDescription.setVisibility(View.GONE);
                                else
                                    itemDescription.setVisibility(View.VISIBLE);
                                itemDescription.setText(itemObj.getString("description"));
                                qtyAndUc.setText("QTY:" + itemObj.getString("quantity") + " UC:" + itemObj.getString("unit_cost"));

                                itemTable.addView(itemView);


                                if (!itemObj.getString("tax1_type").isEmpty()) {

                                    ItemTaxModel taxModel = new ItemTaxModel();
                                    taxModel.setName(itemObj.getString("tax1_name"));
                                    taxModel.setType(itemObj.getString("tax1_type"));
                                    taxModel.setValue(itemObj.getString("tax1_value"));
                                    taxModel.setPercentage(itemObj.getString("tax1_percent"));
                                    taxModelsList.add(taxModel);


                                }


                                if (!itemObj.getString("tax2_type").isEmpty()) {

                                    ItemTaxModel ItemTaxModel = new ItemTaxModel();
                                    ItemTaxModel.setName(itemObj.getString("tax2_name"));
                                    ItemTaxModel.setType(itemObj.getString("tax2_type"));
                                    ItemTaxModel.setValue(itemObj.getString("tax2_value"));
                                    ItemTaxModel.setPercentage(itemObj.getString("tax2_percent"));
                                    taxModelsList.add(ItemTaxModel);


                                }


                            }


                            asubtotalTV.setText(object.getString("sub_total"));

                            for (int k = 0; k < taxModelsList.size(); k++) {
                                LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context
                                        .LAYOUT_INFLATER_SERVICE);
                                View taxRow = inflater.inflate(R.layout.item_tax_row, null);
                                TextView taxName = (TextView) taxRow.findViewById(R.id.taxName);

                                TextView taxValue = (TextView) taxRow.findViewById(R.id.taxValue);


                                taxName.setText(taxModelsList.get(k).getName());
                                taxValue.setText(taxModelsList.get(k).getValue());
                                taxLinear.addView(taxRow);


                            }
                            invoiceTotleLinear.setVisibility(View.GONE);
                            if (!taxModelsList.isEmpty()) {


                                invoiceTotleLinear.setVisibility(View.VISIBLE);
                                InvoiceTotleTV.setText(object.getString("invoice_total"));

                            }

                            // set discount
                            discountLinear.setVisibility(View.GONE);
                            if (!object.getString("total_discount").isEmpty())
                                if (Double.parseDouble(object.getString("total_discount")) > 0) {
                                    discountLinear.setVisibility(View.VISIBLE);

                                    discountTV.setText(object.getString("total_discount"));
                                    balanceAfterDiscountTV.setText("total_discount");

                                }

                            additionalChargeLinear.setVisibility(View.GONE);
                            if (object.getJSONObject("additional_charges").getJSONArray("charge").length() > 0) {
                                additionalChargeLinear.setVisibility(View.VISIBLE);

                                for (int k = 0; k < object.getJSONObject("additional_charges").getJSONArray("charge").length(); k++)

                                {

                                    LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context
                                            .LAYOUT_INFLATER_SERVICE);
                                    View taxRow = inflater.inflate(R.layout.item_tax_row, null);
                                    TextView taxName = (TextView) taxRow.findViewById(R.id.taxName);

                                    TextView taxValue = (TextView) taxRow.findViewById(R.id.taxValue);


                                    taxName.setText(object.getJSONObject("additional_charges").getJSONArray("charge").getJSONObject(k).getString("name"));

                                    taxValue.setText(object.getJSONObject("additional_charges").getJSONArray("charge").getJSONObject(k).getString("value"));
                                    taxLinear.addView(taxRow);

                                }

                            }

                            netBalanceTV.setText(object.getString("net_balance"));
                            outstandingTV.setText(object.getString("outstanding"));
                            amountPaidTV.setText(object.getString("total_paid"));


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }


                    }


                }


                break;


        }

    }
}
