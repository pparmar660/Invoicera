package com.invoicera.Fragment;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.view.ViewPager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.TextView;
import android.widget.Toast;

import com.invoicera.Database.DatabaseHelper;
import com.invoicera.GlobalData.Constant;
import com.invoicera.ListViewAdpter.HomeGrid;
import com.invoicera.ViewPagerAdpter.GraphPagerAdpter;
import com.invoicera.Webservices.WebApiResult;
import com.invoicera.Webservices.WebRequest;
import com.invoicera.androidapp.Home;
import com.invoicera.androidapp.R;
import com.invoicera.listener.FragmentChanger;
import com.invoicera.model.GraphItemModel;
import com.nirhart.parallaxscroll.views.ParallaxListView;
import com.nirhart.parallaxscroll.views.ParallaxScrollView;
import com.viewpagerindicator.TabPageIndicator;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;

public class HomePageFragment extends BaseFragment implements WebApiResult {

    ParallaxScrollView paralaxScrolView;
    public ViewPager pager;
    TextView totalTV;
    GraphPagerAdpter graphAdpter;
    public static String TAG_NOOFITEM = "noofitem";
    public static String TAG_ITEMCOLOR = "itemcolour";
    TabPageIndicator indicator;
    static String FRAGMENT_POS = "fragment_pos";
    static String DATA_LIST = "data_list";
    // ExpandableHeightGridView gridView;
    HomeGrid gridAdter;
    ParallaxListView listView;
    TextView textView;
    FragmentChanger fragmentChanger;
    //
    DatabaseHelper db;
    ContentValues values;
    public int initialPos = -1, lastPOs = -1;
    private boolean mIsScrollingUp, temp = false, init = true;
    ;
    View convertView, convertView2;
    /*
     * ArrayList<ArrayList<GraphItemModel>> itemList = new
     * ArrayList<ArrayList<GraphItemModel>>();
     */
    ArrayList<GraphFragment> myFragmentList = new ArrayList<GraphFragment>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        View rootView = inflater.inflate(R.layout.home_page_fragment,
                container, false);


        listView = (ParallaxListView) rootView.findViewById(R.id.list_view);
        gridAdter = new HomeGrid(context, fragmentChanger);
        Home.toolbarText.setText("Home");
        listView.setOnScrollListener(new OnScrollListener() {

            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {

            }

            @Override
            public void onScroll(AbsListView view, int firstVisibleItem,
                                 int visibleItemCount, int totalItemCount) {

                if (initialPos < 0)
                    initialPos = firstVisibleItem;

                if (listView.getChildAt(initialPos).getY() <= -10) {

                    if (listView.getHeaderViewsCount() == 1 && !temp) {
                        listView.removeHeaderView(convertView);
                        listView.addParallaxedHeaderView(convertView2);

                        temp = true;
                        init = false;
                    }

                } else {
                    if (listView.getChildAt(initialPos).getY() >= -20)
                        if (listView.getHeaderViewsCount() == 1 && temp
                                && !init) {
                            listView.removeHeaderView(convertView2);
                            listView.addParallaxedHeaderView(convertView);

                            temp = false;
                        }

                }

            }

        });
        db=new DatabaseHelper(context);

		/*
         * paralaxScrolView.getViewTreeObserver().addOnScrollChangedListener(
		 * new OnScrollChangedListener() {
		 * 
		 * @Override public void onScrollChanged() { // TODO Auto-generated
		 * method stub
		 * 
		 * int scrollX = paralaxScrolView.getScrollX(); int scrollY =
		 * paralaxScrolView.getScrollY();
		 * 
		 * if (scrollY >= 160) { pager.setVisibility(View.GONE);
		 * totalTV.setVisibility(View.VISIBLE);
		 * 
		 * } else {
		 * 
		 * pager.setVisibility(View.VISIBLE); totalTV.setVisibility(View.GONE);
		 * 
		 * }
		 * 
		 * } });
		 */

        inflater = (LayoutInflater) Home.context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        convertView = inflater.inflate(R.layout.home_viewpager, null);
        convertView2 = inflater.inflate(R.layout.animation_text, null);
        pager = (ViewPager) convertView.findViewById(R.id.pager);

        pager.getLayoutParams().height = (global.screenHeight * 90) / 200;
        pager.invalidate();
        indicator = (TabPageIndicator) convertView.findViewById(R.id.indicator);
        textView = (TextView) convertView2.findViewById(R.id.textView);
        textView.getLayoutParams().height = (global.screenHeight * 90) / 200;
        SetGarphItem();


        listView.addParallaxedHeaderView(convertView);


        listView.setAdapter(gridAdter);
        getDataFromWeb();

        return rootView;
    }

    public void SetGarphItem() {

        graphAdpter = new GraphPagerAdpter(getChildFragmentManager());
        pager.setAdapter(graphAdpter);

        GraphItemModel map = new GraphItemModel();
        ArrayList<GraphItemModel> model = new ArrayList<GraphItemModel>();
        map.setNumberOfIem(200);
        map.setColourCode("#14b0cc");
        map.setItemName("Paid");
        map.setType("Invoice");
        model.add(map);

        map = new GraphItemModel();
        map.setNumberOfIem(200);
        map.setColourCode("#638701");
        map.setItemName("Oustanig");
        map.setType("Invoice");
        model.add(map);

        map = new GraphItemModel();
        map.setNumberOfIem(100);
        map.setColourCode("#c99f06");
        map.setItemName("Sent");
        map.setType("Invoice");
        model.add(map);

        map = new GraphItemModel();
        map.setNumberOfIem(80);
        map.setItemName("Save");
        map.setType("Invoice");
        map.setColourCode("#c99f06");
        model.add(map);

        GraphFragment fragment = new GraphFragment();
        Bundle arguments = new Bundle();
        arguments.putInt(FRAGMENT_POS, 0);
        arguments.putParcelableArrayList(DATA_LIST, model);
        fragment.setArguments(arguments);
        graphAdpter.add(fragment);

        // ----------------Second type

        map = new GraphItemModel();
        model = new ArrayList<GraphItemModel>();

        map.setNumberOfIem(200);
        map.setColourCode("#14b0cc");
        map.setItemName("Paid");
        map.setType("Estimate");
        model.add(map);

        map = new GraphItemModel();
        map.setNumberOfIem(200);
        map.setColourCode("#638701");
        map.setItemName("Oustanig");
        map.setType("Estimate");
        model.add(map);

        map = new GraphItemModel();
        map.setNumberOfIem(100);
        map.setColourCode("#c99f06");
        map.setItemName("Sent");
        map.setType("Estimate");
        model.add(map);

        fragment = new GraphFragment();
        arguments = new Bundle();
        arguments.putInt(FRAGMENT_POS, 1);
        arguments.putParcelableArrayList(DATA_LIST, model);
        fragment.setArguments(arguments);
        graphAdpter.add(fragment);

        // ------3rd--

        map = new GraphItemModel();
        model = new ArrayList<GraphItemModel>();

        map.setNumberOfIem(200);
        map.setColourCode("#14b0cc");
        map.setItemName("Paid");
        map.setType("Expense");
        model.add(map);

        map = new GraphItemModel();
        map.setNumberOfIem(200);
        map.setColourCode("#638701");
        map.setItemName("Oustanig");
        map.setType("Expense");
        model.add(map);

        map = new GraphItemModel();
        map.setNumberOfIem(100);
        map.setColourCode("#c99f06");
        map.setItemName("Sent");
        map.setType("Expense");
        model.add(map);

        fragment = new GraphFragment();
        arguments = new Bundle();
        arguments.putInt(FRAGMENT_POS, 1);
        arguments.putParcelableArrayList(DATA_LIST, model);
        fragment.setArguments(arguments);
        graphAdpter.add(fragment);

        // ---Forth

        map = new GraphItemModel();
        model = new ArrayList<GraphItemModel>();

        map.setNumberOfIem(200);
        map.setColourCode("#14b0cc");
        map.setItemName("Paid");
        map.setType("Recurring");
        model.add(map);

        map = new GraphItemModel();
        map.setNumberOfIem(200);
        map.setColourCode("#638701");
        map.setItemName("Oustanig");
        map.setType("Recurring");
        model.add(map);

        map = new GraphItemModel();
        map.setNumberOfIem(100);
        map.setColourCode("#c99f06");
        map.setItemName("Sent");
        map.setType("Recurring");
        model.add(map);

        fragment = new GraphFragment();
        arguments = new Bundle();
        arguments.putInt(FRAGMENT_POS, 1);
        arguments.putParcelableArrayList(DATA_LIST, model);
        fragment.setArguments(arguments);
        graphAdpter.add(fragment);

        indicator.setViewPager(pager);

    }

    @Override
    public void onAttach(Activity activity) {
        // TODO Auto-generated method stub
        super.onAttach(activity);
        fragmentChanger = (FragmentChanger) getActivity();
    }


    public void getDataFromWeb() {

        JSONObject obj = null;
        try {
            obj = new JSONObject();

            obj.put(Constant.KEY_METHOD, "getHomeData");


        } catch (JSONException e) {
            e.printStackTrace();
        }

        WebRequest request = new WebRequest(context, obj,
                Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_DATA, this, true);
        request.execute();

    }

    @Override
    public void getWebResult(Constant.SERVICE_TYPE type, JSONObject result) {
        if (result == null)
            return;
        try {
            if (!result.getString("code").equalsIgnoreCase("200")) {
                if (result.has("message"))
                    Toast.makeText(context, result.getString("message").toString(), Toast.LENGTH_SHORT).show();
                return;

            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        switch (type) {

            case GET_DATA:
                db.ClearTable(DatabaseHelper.Table_GraphData);
                values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString()); // Contact

                db.insert(DatabaseHelper.Table_GraphData, values);


                String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_GraphData;

                Cursor cursor = db.getRecords(selectQuery);

                if (cursor.moveToFirst() && cursor.getCount() > 0)
                    for (int i = 0; i < cursor.getCount(); i++) {


                        try {
                            JSONObject object = new JSONObject(cursor.getString(cursor
                                    .getColumnIndex(DatabaseHelper.JSON_DATA)));

                            // set color array

                            JSONObject colorObj = object.getJSONObject("ColorCode");
                            global.colourArray=new HashMap<>();
                            global.colourArray.put(Constant.KEY_SENT, colorObj.getString(Constant.KEY_SENT));

                            global.colourArray.put(Constant.KEY_DRAFT, colorObj.getString(Constant.KEY_DRAFT));
                            global.colourArray.put(Constant.KEY_OUTSTANDING, colorObj.getString(Constant.KEY_OUTSTANDING));
                            global.colourArray.put(Constant.KEY_PAID, colorObj.getString(Constant.KEY_PAID));
                            global.colourArray.put(Constant.KEY_PARTIAL_PAID, colorObj.getString(Constant.KEY_PARTIAL_PAID));
                            global.colourArray.put(Constant.KEY_INVOICED, colorObj.getString(Constant.KEY_INVOICED));
                            global.colourArray.put(Constant.KEY_UNBILLED, colorObj.getString(Constant.KEY_UNBILLED));
                            global.colourArray.put(Constant.KEY_EXPIRED, colorObj.getString(Constant.KEY_EXPIRED));
                            global.colourArray.put(Constant.KEY_ACCEPTED, colorObj.getString(Constant.KEY_ACCEPTED));
                            global.colourArray.put(Constant.KEY_REJECTED, colorObj.getString(Constant.KEY_REJECTED));


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                    }


                break;


        }


    }
}
