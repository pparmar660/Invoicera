package com.invoicera.ViewPagerFragment;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.FragmentManager;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import com.invoicera.CustomView.NoScrollListView;
import com.invoicera.Database.DatabaseHelper;
import com.invoicera.Fragment.BaseFragment;
import com.invoicera.Fragment.EstimatePreviewCreateFragment;
import com.invoicera.Fragment.HomePageFragment;
import com.invoicera.GlobalData.Constant;
import com.invoicera.InterFace.ResultFromChildFragment;
import com.invoicera.InterFace.UpdateChargeAndTax;
import com.invoicera.InterFace.WebApiResult;
import com.invoicera.ListViewAdpter.ChargesAndTaxListAdapter;
import com.invoicera.ListViewAdpter.ItemListAdapter;
import com.invoicera.Utility.MyDateFormat;
import com.invoicera.Utility.Utils;
import com.invoicera.Webservices.WebRequest;
import com.invoicera.androidapp.CreateEstimateDetail;
import com.invoicera.androidapp.CreateItem;
import com.invoicera.androidapp.R;
import com.invoicera.androidapp.SelectPaymentGateWay;
import com.invoicera.listener.FragmentChanger;
import com.invoicera.model.ItemModel;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;

/**
 * Created by vinove on 30/7/15.
 */
public class EstimateCreateEditPagerFragment extends BaseFragment implements
        View.OnClickListener, WebApiResult, RadioGroup.OnCheckedChangeListener, UpdateChargeAndTax {

    private NoScrollListView chargesListView, taxListView;
    RelativeLayout AddItemView, createEstimateNumberVew;
    // public static ArrayList<AdditionalCharge> selectedAdditionalChargeList;
    public FragmentChanger fragmentChanger;
    transient Context myContext;
    ItemListAdapter itemListAdapter;
    transient Bundle argument;
    transient ResultFromChildFragment fromChildFragment;
    ArrayList<ItemModel> itemList = new ArrayList<ItemModel>();
    LinearLayout itemLiner;
    TableRow discountOnTotalLinear, taxOnTotalLinear, allowPartialPaymentLinear, totalAfterDiscountLinear;
    public String estimate_no, estimate_date, selectQuery, schedule_on, estimate_note,estimate_title, term_condition, lateFeeName, clientName, clientId, clientAdd, clientCurrency;

    TextView addCharges, estimateNoTV, subtotalValueTV, itemTotalTaxTV, totalTV, totalAfterDiscountTV, addTax, netBalanceTV, estimate_dateTV, sendTV, saveTV, amountPaidTV;
    String discount_type = "Fixed", send_mail = "0";
    RadioGroup discountRadioGroup;
    ContentValues values;
    DatabaseHelper db;
    RadioButton flatButton, percentButton;
    public TextView clientTV, selectItemTV, grossTotalTV, paymentGatewayTextView;
    /*    boolean isDiscountOnTotal, isTaxOnTotal, isPartialPayment, isTitleShow;*/
    transient Intent i;
    double totalItemTaxValue = 0, SubTotalValue, discount, itemsTotalAmount, totalAfterDiscount, netBalance, grossTotal, totalPaid = 0;
    boolean isDiscountFlat = true;
    EditText discountEt;
    CheckBox AllowPartialPaymentCheckBox;
    ArrayList<HashMap<String, String>> selectedPaymentGatewayListList;
    Cursor cursor;
    String estimateId;

    WebApiResult webApiResult;
    Calendar myCalendar;

    HashMap<Integer, Integer> selectedTax;
    ChargesAndTaxListAdapter additionalChargesAdapter, taxListAdapter;
    boolean isEditing = false;
    TableRow amountPaidRow;





    @Override
    public View onCreateView(LayoutInflater inflater,
                             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        // TODO Auto-generated method stub

        View view = inflater.inflate(R.layout.create_estimatae, container, false);

        //
        isEditing = false;
        Bundle argument = getArguments();

        if (argument.getString(Constant.KEY_ESTIMATE_ID) != null) {
            if (!argument.getString(Constant.KEY_ESTIMATE_ID).isEmpty() && !argument.getString(Constant.KEY_ESTIMATE_ID).equalsIgnoreCase("null")) {
                estimateId = argument.getString(Constant.KEY_ESTIMATE_ID);
                isEditing = true;
            }
        }


        chargesListView = (NoScrollListView) view.findViewById(R.id.chargeslistView);
        taxListView = (NoScrollListView) view.findViewById(R.id.taxlistView);
        selectItemTV = (TextView) view.findViewById(R.id.item_add);
        AddItemView = (RelativeLayout) view.findViewById(R.id.addItemLinear);
        AddItemView.setVisibility(View.GONE);
        createEstimateNumberVew = (RelativeLayout) view
                .findViewById(R.id.creteNumber);
        db = new DatabaseHelper(context);
        // selectedAdditionalChargeList = new ArrayList<>();
        itemListAdapter = new ItemListAdapter((Activity) context);

        estimateNoTV = (TextView) view.findViewById(R.id.number);
        estimate_dateTV = (TextView) view.findViewById(R.id.estimate_date);
        clientTV = (TextView) view.findViewById(R.id.selectClientView);
        itemList = new ArrayList<>();
        netBalanceTV = (TextView) view.findViewById(R.id.netBalance);
        webApiResult = this;
        selectedPaymentGatewayListList = new ArrayList<>();
        additionalChargesAdapter = new ChargesAndTaxListAdapter(context, Constant.POP_UP.ADDITIONAL_CHARGES, Constant.SERVICE_TYPE.GET_ADDITIONAL_CHARGE, this);
        taxListAdapter = new ChargesAndTaxListAdapter(context, Constant.POP_UP.TAX, Constant.SERVICE_TYPE.GET_TAX_LIST, this);
        taxListView.setAdapter(taxListAdapter);
        chargesListView = (NoScrollListView) view.findViewById(R.id.chargeslistView);
        chargesListView.setAdapter(additionalChargesAdapter);
        // ---
        addCharges = (TextView) view.findViewById(R.id.addCharges);
        sendTV = (TextView) view.findViewById(R.id.send);
        saveTV = (TextView) view.findViewById(R.id.save);
        sendTV.setOnClickListener(this);
        saveTV.setOnClickListener(this);
        clientTV.setOnClickListener(this);
        selectItemTV.setOnClickListener(this);
        AddItemView.setOnClickListener(this);
        addCharges.setOnClickListener(this);
        createEstimateNumberVew.setOnClickListener(this);
        itemLiner = (LinearLayout) view.findViewById(R.id.linear_item);
        itemLiner.setVisibility(View.GONE);
        totalAfterDiscountLinear = (TableRow) view.findViewById(R.id.total_after_discountLinear);
        discountRadioGroup = (RadioGroup) view.findViewById(R.id.discount);
        discountRadioGroup.setOnCheckedChangeListener(this);
        discountEt = (EditText) view.findViewById(R.id.dicountValue);
        subtotalValueTV = (TextView) view.findViewById(R.id.subtotalValue);
        itemTotalTaxTV = (TextView) view.findViewById(R.id.total_tax_on_item);
        totalTV = (TextView) view.findViewById(R.id.total);
        totalAfterDiscountTV = (TextView) view.findViewById(R.id.total_after_discount);
        discountEt = (EditText) view.findViewById(R.id.discountValue);
        addTax = (TextView) view.findViewById(R.id.addTax);
        addTax.setOnClickListener(this);
        selectedTax = new HashMap<>();
        grossTotalTV = (TextView) view.findViewById(R.id.grossTotal);
        AllowPartialPaymentCheckBox = (CheckBox) view.findViewById(R.id.allowPartialPayment);
        paymentGatewayTextView = (TextView) view.findViewById(R.id.paymentGateWay);
        paymentGatewayTextView.setOnClickListener(this);

        myCalendar = Calendar.getInstance();
        String myFormat = "yyyy-MM-dd"; //In which you need put here
        SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);
        estimate_dateTV.setText(sdf.format(myCalendar.getTime()));
        flatButton = (RadioButton) view.findViewById(R.id.flat);
        percentButton = (RadioButton) view.findViewById(R.id.percent);
        discountOnTotalLinear = (TableRow) view.findViewById(R.id.discountOnTotalLinear);
        allowPartialPaymentLinear = (TableRow) view.findViewById(R.id.allowPartialPaymentLinear);
        taxOnTotalLinear = (TableRow) view.findViewById(R.id.taxOnTotalLinear);
        amountPaidRow = (TableRow) view.findViewById(R.id.amountPaidLiner);
        amountPaidTV = (TextView) view.findViewById(R.id.amountPaid);

        discountEt.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {

                if (discountEt.getText().toString().isEmpty())
                    return;
                if (totalTV.getText().toString().isEmpty())
                    return;

                if (!isDiscountFlat) {


                    try {
                        if (Double.parseDouble(discountEt.getText().toString()) > 100) {
                            global.showAlert("Discount % should not be greater than 100", context);
                            discountEt.setText("0.0");

                        }
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                } else {

                    double total = 0;


                    try {
                        total = Double.parseDouble(totalTV.getText().toString());
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }


                    if (total - Double.parseDouble(discountEt.getText().toString()) < 0) {
                        global.showAlert("Discount  should not be greater than total", context);
                        discountEt.setText("0.0");
                    }

                }


                updateIem();


            }
        });

        //-----------------------------------------------------------

        selectQuery = "Select " + DatabaseHelper.JSON_DATA
                + " From " + DatabaseHelper.Table_EstimateCreateSettings;

        cursor = db.getRecords(selectQuery);
        JSONObject object = null;
        if (cursor.moveToFirst() && cursor.getCount() > 0)
            for (int i = 0; i < cursor.getCount(); i++) {

                try {
                    object = new JSONObject(cursor.getString(cursor.getColumnIndex(DatabaseHelper.JSON_DATA)));
                    estimate_no = "";
                    estimate_note = object.getString("Estimate_Notes");
                    estimateNoTV.setText(estimate_no);

                    if (object.getString("discountOnTotal").equalsIgnoreCase("No")) {
                        discountOnTotalLinear.setVisibility(View.GONE);
                        totalAfterDiscountLinear.setVisibility(View.GONE);
                    } else {
                        discountOnTotalLinear.setVisibility(View.VISIBLE);


                        totalAfterDiscountLinear.setVisibility(View.VISIBLE);
                    }


                    if (object.getString("taxOnTotal").equalsIgnoreCase("No"))
                        taxOnTotalLinear.setVisibility(View.GONE);

                    else taxOnTotalLinear.setVisibility(View.VISIBLE);


                    if (object.getString("isPartialAmount").equalsIgnoreCase("No"))
                        allowPartialPaymentLinear.setVisibility(View.GONE);
                    else allowPartialPaymentLinear.setVisibility(View.VISIBLE);


                } catch (JSONException e) {
                    e.printStackTrace();
                }


            }
        //------------------------------------------------------------

        if (!isEditing) {
            // get data from web ---------------------------------------------------------


            JSONObject obj = new JSONObject();

            try {
                obj.put(Constant.KEY_METHOD, "getEstimateSetting");
            } catch (JSONException e) {

                e.printStackTrace();
            }
            WebRequest request = new WebRequest(context, obj, Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_SETTING, Constant.token, this, true);
            request.execute();

            //-----------------------------------------------------------------------------------------
        } // else setDataForEditing(estimateId);

        return view;

    }


    @Override
    public void onAttach(Activity activity) {
        // TODO Auto-generated method stub
        super.onAttach(activity);

        fragmentChanger = (FragmentChanger) getActivity();

    }

    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub
        boolean canSend = false;
        switch (v.getId()) {
            case R.id.selectClientView:

              /*  SelectClient myf = new SelectClient();
                itemList = new ArrayList<>();
                updateIem();
                getChildFragmentManager().beginTransaction().replace(R.id.mainframe, myf).commit();
                getView().findViewById(R.id.mainframe).setVisibility(View.VISIBLE);*/

                i = new Intent(context, com.invoicera.androidapp.SelectClient.class);
                getActivity().startActivityForResult(i,
                        Constant.requestCodeSelectClient);

                break;

            case R.id.item_add:

            case R.id.addItemLinear:

                myContext = getActivity().getApplicationContext();

                i = new Intent(myContext, CreateItem.class);
                if (clientCurrency != null) {
                    i.putExtra(Constant.KEY_CLIENT_CURRENCY, clientCurrency);
                    i.putExtra(Constant.KEY_REQUEST,  Constant.requestCodeCreateEstimateItem);
                    getActivity().startActivityForResult(i,
                            Constant.requestCodeCreateEstimateItem);
                    selectItemTV.setVisibility(View.GONE);

                    AddItemView.setVisibility(View.VISIBLE);
                } else {
                    Toast.makeText(context, "Client currency is not valid", Toast.LENGTH_SHORT).show();

                }
                break;
            case R.id.creteNumber:
                Intent intent = new Intent(context, CreateEstimateDetail.class);
                intent.putExtra(Constant.KEY_NO, estimate_no);
                intent.putExtra(Constant.KEY_DATE, estimate_date);
                intent.putExtra(Constant.KEY_TITLE, estimate_title);
              //  intent.putExtra(Constant.KEY_DUE_DATE, due_date);
                intent.putExtra(Constant.KEY_SCHEDUAL_DATE, schedule_on);
                intent.putExtra(Constant.KEY_NOTE, estimate_note);
                intent.putExtra(Constant.KEY_TermsAndCondition, term_condition);
              //  intent.putExtra(Constant.KEY_LATE_FEE_ID, late_feeId);

                intent.putExtra(Constant.KEY_REQUEST, Constant.requestCodeCreateEstimateDetail);

                intent.putExtra(Constant.KEY_LATE_FEE_NAME, lateFeeName);
                getActivity().startActivityForResult(intent, Constant.requestCodeCreateEstimateDetail);
                break;
            case R.id.addCharges:
                additionalChargesAdapter.add(new HashMap<String, String>());

                break;

            case R.id.addTax:
                taxListAdapter.add(new HashMap<String, String>());

                break;

            case R.id.paymentGateWay:
                myContext = getActivity().getApplicationContext();
                i = new Intent(myContext, SelectPaymentGateWay.class);
                i.putExtra(Constant.KEY_PAYMENT_GATEWAY, selectedPaymentGatewayListList);
                getActivity().startActivityForResult(i,
                        Constant.requestCodeSelectPaymentGateway);

                break;


            case R.id.save:
                canSend = false;
                send_mail = "0";
                if (clientId != null)
                    if (!clientId.isEmpty())
                        canSend = true;

                if (canSend)
                    createEstimate();
                else global.showAlert("Please select client", context);
                break;
            case R.id.send:

                canSend = false;
                send_mail = "1";
                if (clientId != null)
                    if (!clientId.isEmpty())
                        canSend = true;
                if (canSend)
                    createEstimate();
                else global.showAlert("Please select client", context);
            default:
                break;
        }

    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (data == null)
            return;
        if (requestCode == Constant.requestCodeCreateEstimateItem) {
            ItemModel model = (ItemModel) data.getParcelableExtra(Constant.KEY_ITEM);
            itemList.add(model);
            updateIem();
/*

            itemLiner.setVisibility(View.VISIBLE);
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View itemRow = inflater.inflate(R.layout.create_invoice_item_row, null);
            itemLiner.addView(itemRow);*/
        }

        if (requestCode == Constant.requestCodeCreateEstimateDetail) {
            estimate_no = data.getStringExtra(Constant.KEY_NO);

            estimate_date = data.getStringExtra(Constant.KEY_DATE);

            estimate_title = data.getStringExtra(Constant.KEY_TITLE);
            estimate_note = data.getStringExtra(Constant.KEY_NOTE);
            //due_date = data.getStringExtra(Constant.KEY_DUE_DATE);
           // late_feeId = data.getStringExtra(Constant.KEY_LATE_FEE_ID);
            term_condition = data.getStringExtra(Constant.KEY_TermsAndCondition);
            schedule_on = data.getStringExtra(Constant.KEY_SCHEDUAL_DATE);
            lateFeeName = data.getStringExtra(Constant.KEY_LATE_FEE_NAME);
            estimateNoTV.setText(estimate_no);
            estimate_dateTV.setText(estimate_date);

        }

        if (requestCode == Constant.requestCodeSelectClient) {

            HashMap<String, String> map = (HashMap) data.getSerializableExtra(Constant.KEY_CLIENT);
            if (map != null) {


                clientAdd = map.get(Constant.KEY_ADDRESS);
                clientName = map.get(Constant.KEY_CLIENT_NAME);
                clientId = map.get(Constant.KEY_CLIENT_ID);
                clientCurrency = map.get(Constant.KEY_CLIENT_CURRENCY);
                clientTV.setText(clientName);
                totalAfterDiscountTV.setText(Utils.FloatToStringLimits(totalAfterDiscount));
                resetAllView();
            }
        }

        if (requestCode == Constant.requestCodeSelectPaymentGateway) {

            selectedPaymentGatewayListList = (ArrayList<HashMap<String, String>>) data.getSerializableExtra(Constant.KEY_PAYMENT_GATEWAY);

        }
    }

    @Override
    public void getWebResult(Constant.SERVICE_TYPE type, JSONObject result) {
/*
        Home.progressBarHome.setVisibility(View.GONE);*/
        if (result == null)
            return;
        try {
            if (type == Constant.SERVICE_TYPE.CREATE)
                db.ClearTable(DatabaseHelper.Table_CreateOfflineEstimate);


            if (!result.getString("code").equalsIgnoreCase("200")) {
                if (type == Constant.SERVICE_TYPE.CREATE)
                    db.ClearTable(DatabaseHelper.Table_CreateOfflineEstimate);

                if (result.has("message")) {
                    Toast.makeText(context, result.getString("message").toString(), Toast.LENGTH_SHORT).show();

                    return;
                }

            }
        } catch (JSONException e) {
            e.printStackTrace();
        }


        JSONObject object;
        boolean updatePopUp = false;
        switch (type) {

            case GET_SETTING:
                db.ClearTable(DatabaseHelper.Table_EstimateCreateSettings);
                values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString());
                db.insert(DatabaseHelper.Table_EstimateCreateSettings, values);

                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_EstimateCreateSettings;

                cursor = db.getRecords(selectQuery);
                object = null;
                if (cursor.moveToFirst() && cursor.getCount() > 0)
                    for (int i = 0; i < cursor.getCount(); i++) {

                        try {
                            object = new JSONObject(cursor.getString(cursor.getColumnIndex(DatabaseHelper.JSON_DATA)));
                            estimate_no = object.getString("estimate_no");
                            estimate_note = object.getString("Estimate_Notes");
                            estimateNoTV.setText(estimate_no);


                            if (object.getString("discountOnTotal").equalsIgnoreCase("No")) {
                                discountOnTotalLinear.setVisibility(View.GONE);
                                totalAfterDiscountLinear.setVisibility(View.GONE);
                            } else {
                                discountOnTotalLinear.setVisibility(View.VISIBLE);


                                totalAfterDiscountLinear.setVisibility(View.VISIBLE);
                            }


                            if (object.getString("taxOnTotal").equalsIgnoreCase("No"))
                                taxOnTotalLinear.setVisibility(View.GONE);

                            else taxOnTotalLinear.setVisibility(View.VISIBLE);


                            if (object.getString("isPartialAmount").equalsIgnoreCase("No"))
                                allowPartialPaymentLinear.setVisibility(View.GONE);
                            else allowPartialPaymentLinear.setVisibility(View.VISIBLE);


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }


                    }


                break;


            case CREATE:
                Log.e("**************1", "*******");
                db.ClearTable(DatabaseHelper.Table_EstimatePreviewData);
                values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString()); // Contact
                try {
                    estimateId = result.getString("estimate_id");
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                values.put(DatabaseHelper.ID, estimateId);
                db.insert(DatabaseHelper.Table_EstimatePreviewData, values);

                Bundle arguments = new Bundle();
                //    System.out.println("Id1:" + adapter.estimateList.get(position).getInvoice_id());
                arguments.putString(Constant.KEY_ESTIMATE_ID, estimateId);
                arguments.putInt(Constant.KEY_POSITION, 1);

                if (global.isNetworkAvailable()) {


                    fragmentChanger.onFragmentReplaceWithBackStack(new EstimatePreviewCreateFragment(), Constant.EstimatePreviewCreateFragmentTag, arguments);
                }


          /*      String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_InvoicePreviewData + " WHERE " + DatabaseHelper.ID + " ='" + estimateId + "'";

                Cursor cursor = db.getRecords(selectQuery);


                if (cursor.moveToFirst() && cursor.getCount() > 0) {
                    Log.e("**************3", "*******");

                    //totalItem = new ArrayList<>();
                    for (int i = 0; i < cursor.getCount(); i++) {

                        try {

                            object = (new JSONObject
                                    (cursor.getString(cursor.getColumnIndex(db.JSON_DATA)))).getJSONObject("invoice");
                            InvoicePreviewPagerFragment fragment = (InvoicePreviewPagerFragment) pagerAdapter.getItem(1);
                            pager.setCurrentItem(1);
                            fragment.setData(object);
                            Log.e("**************4", "*******");
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }


                    }

                }

*/


                break;


        }
    }


/*    public void getChildFragment(Constant.FRAGMENT_RESULT type, HashMap<String, String> result) {

        switch (type) {


            case CLIENT:
                getView().findViewById(R.id.mainframe).setVisibility(View.GONE);
                clientAdd = result.get(Constant.KEY_ADDRESS);
                clientName = result.get(Constant.KEY_CLIENT_NAME);
                clientId = result.get(Constant.KEY_CLIENT_ID);
                clientCurrency = result.get(Constant.KEY_CLIENT_CURRENCY);
                clientTV.setText(clientName);
                totalAfterDiscountTV.setText(Utils.FloatToStringLimits(totalAfterDiscount));
                resetAllView();

                break;
        }

    }*/

    public void updateIem() {

        itemLiner.removeAllViews();
        ItemModel model;
        SubTotalValue = 0;
        totalItemTaxValue = 0;
        itemsTotalAmount = 0;
        totalAfterDiscount = 0;
        discount = 0;
        netBalance = 0;

        if (itemList.isEmpty()) {

            itemLiner.setVisibility(View.GONE);
            selectItemTV.setVisibility(View.VISIBLE);
            AddItemView.setVisibility(View.GONE);
            subtotalValueTV.setText(Utils.FloatToStringLimits(SubTotalValue));
            itemTotalTaxTV.setText(Utils.FloatToStringLimits(totalItemTaxValue));
            totalTV.setText(Utils.FloatToStringLimits(itemsTotalAmount));
            netBalanceTV.setText(Utils.FloatToStringLimits(netBalance));
            grossTotalTV.setText(0 + "");
            return;
        }

        for (int i = 0; i < itemList.size(); i++)

        {
            model = itemList.get(i);
            itemLiner.setVisibility(View.VISIBLE);
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View itemRow = inflater.inflate(R.layout.create_item_row, null);

            ImageView crossImage = (ImageView) itemRow.findViewById(R.id.cross);
            crossImage.setTag(i);
            crossImage.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    int pos = (int) v.getTag();
                    itemList.remove(pos);
                    updateIem();
                }
            });

            TextView itemName = (TextView) itemRow.findViewById(R.id.itemName);
            TextView qtyAndCost = (TextView) itemRow.findViewById(R.id.qty_uc);
            TextView discountValue = (TextView) itemRow.findViewById(R.id.discount);
            TextView totalValue = (TextView) itemRow.findViewById(R.id.total);
            itemName.setText(model.getName());
            qtyAndCost.setText("QTY : " + model.getQuantity() + " Unit Cost : " + model.getUnit_cost());
            discountValue.setText("Discount : " + model.getDiscountAmount());
            totalValue.setText(clientCurrency + " " + Utils.FloatToStringLimits(model.getTotalValue()));

            try {
             //   totalItemTaxValue = totalItemTaxValue + Double.parseDouble(model.getTotalTAx().replaceAll(",", ""));
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }

            try {
                SubTotalValue = SubTotalValue + Double.parseDouble(model.getTotalValue().replaceAll(",", ""));
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }


            itemLiner.addView(itemRow);


        }

        subtotalValueTV.setText(Utils.FloatToStringLimits(SubTotalValue));
        itemTotalTaxTV.setText(Utils.FloatToStringLimits(totalItemTaxValue));
        itemsTotalAmount = (SubTotalValue + totalItemTaxValue);
        totalTV.setText(Utils.FloatToStringLimits(itemsTotalAmount));

        if (isDiscountFlat) {
            try {

                if (!discountEt.getText().toString().isEmpty())
                    discount = Double.parseDouble(discountEt.getText().toString().replaceAll(",", ""));
            } catch (NumberFormatException e) {
                discount = 0;
                e.printStackTrace();
            }
        } else {
            try {
                if (!discountEt.getText().toString().isEmpty())
                    discount = (itemsTotalAmount) * Double.parseDouble(discountEt.getText().toString().replaceAll(",", "")
                    ) / 100;
            } catch (NumberFormatException e) {
                discount = 0;
                e.printStackTrace();
            }


        }

        totalAfterDiscount = itemsTotalAmount - discount;
        totalAfterDiscountTV.setText(Utils.FloatToStringLimits(totalAfterDiscount));

        netBalance = totalAfterDiscount;


        //add  additional charges

        if (!additionalChargesAdapter.selectedItemList.isEmpty())
            for (int i = 0; i < additionalChargesAdapter.selectedItemList.size(); i++) {

                if (additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_NAME) != null)
                    if (!additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_NAME).isEmpty()) {


                        try {
                            if (!additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_TYPE).equalsIgnoreCase("Fixed")) {


                                netBalance = netBalance + (totalAfterDiscount * (Double.parseDouble(additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""))) / 100);


                            } else {

                                netBalance = netBalance + Double.parseDouble(additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""));
                            }
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                        }


                    }

            }

        netBalanceTV.setText(Utils.FloatToStringLimits(netBalance));


        // add tax


        grossTotal = netBalance;

        if (!taxListAdapter.selectedItemList.isEmpty()) {
            for (int i = 0; i < taxListAdapter.selectedItemList.size(); i++) {
                if (taxListAdapter.selectedItemList.get(i).get(Constant.KEY_NAME) != null)
                    if (!taxListAdapter.selectedItemList.get(i).get(Constant.KEY_NAME).isEmpty()) {

                        try {


                            grossTotal = grossTotal + (netBalance * (Double.parseDouble(taxListAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""))) / 100);


                      /*      if (taxListAdapter.selectedItemList.get(i).get(Constant.KEY_TYPE).equalsIgnoreCase("Normal")) {
                                grossTotal = grossTotal + (netBalance * (Double.parseDouble(taxListAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""))) / 100);


                            } else {


                                grossTotal = grossTotal + (Double.parseDouble(taxListAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", "")));
                            }*/
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                        }

                    }

            }


        }
        amountPaidRow.setVisibility(View.GONE);
        if (totalPaid > 0) {
            amountPaidRow.setVisibility(View.VISIBLE);
            amountPaidTV.setText(totalPaid + "");
            grossTotal = grossTotal - totalPaid;
        }

        grossTotalTV.setText(Utils.FloatToStringLimits(grossTotal));


    }


    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {

        switch (checkedId) {

            case R.id.flat:
                isDiscountFlat = true;
                discountEt.setText("0.0");
                discount_type = "Fixed";
                break;
            case R.id.percent:
                discount_type = "Percent";
                isDiscountFlat = false;
                discountEt.setText("0.0");
                break;

        }

    }


    @Override
    public void UpdateChargeAndTaxValue(Constant.POP_UP type) {
        /*updateIem();*/

        netBalance = totalAfterDiscount;
        switch (type) {


            case ADDITIONAL_CHARGES:

                //add  additional charges

                if (!additionalChargesAdapter.selectedItemList.isEmpty())
                    for (int i = 0; i < additionalChargesAdapter.selectedItemList.size(); i++) {

                        if (additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_NAME) != null)
                            if (!additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_NAME).isEmpty()) {


                                try {
                                    if (!additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_TYPE).equalsIgnoreCase("Fixed")) {


                                        netBalance = netBalance + (totalAfterDiscount * (Double.parseDouble(additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""))) / 100);


                                    } else {

                                        netBalance = netBalance + Double.parseDouble(additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""));
                                    }
                                } catch (NumberFormatException e) {
                                    e.printStackTrace();
                                }


                            }

                    }

                netBalanceTV.setText(Utils.FloatToStringLimits(netBalance));


            case TAX:
                grossTotal = netBalance;

                if (!taxListAdapter.selectedItemList.isEmpty()) {
                    for (int i = 0; i < taxListAdapter.selectedItemList.size(); i++) {
                        if (taxListAdapter.selectedItemList.get(i).get(Constant.KEY_NAME) != null)
                            if (!taxListAdapter.selectedItemList.get(i).get(Constant.KEY_NAME).isEmpty()) {

                                try {


                                    grossTotal = grossTotal + (netBalance * (Double.parseDouble(taxListAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE).replaceAll(",", ""))) / 100);


                                } catch (NumberFormatException e) {
                                    e.printStackTrace();
                                }

                            }

                    }


                }

                grossTotalTV.setText(Utils.FloatToStringLimits(grossTotal));
                break;


        }


    }


    private void resetAllView() {


        itemList = new ArrayList<>();
        discountEt.setText(0 + "");
        additionalChargesAdapter.selectedItemList = new ArrayList<>();
        taxListAdapter.selectedItemList = new ArrayList<>();
        updateIem();


    }


    public void setDataForEditing(String id) {
        if (db == null)
            return;

        JSONObject object = null;
        //---------------Load data from local
        String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                + " From " + DatabaseHelper.Table_EstimatePreviewData + " WHERE " + DatabaseHelper.ID + " ='" + id + "'";
        Cursor cursor = db.getRecords(selectQuery);


        if (cursor.moveToFirst() && cursor.getCount() > 0) {


            //totalItem = new ArrayList<>();
            for (int i = 0; i < cursor.getCount(); i++) {

                try {

                    object = (new JSONObject
                            (cursor.getString(cursor.getColumnIndex(DatabaseHelper.JSON_DATA)))).getJSONObject("estimate");


                } catch (JSONException e) {
                    e.printStackTrace();
                }


            }


        }
        if (object == null)
            return;

        Log.e("Set Data --%%%%%%%%:", object.toString());

        try {
            estimate_no = object.getString("number");
            estimate_title = object.getString("estimate_title");
            estimate_note = object.getString("notes");
            term_condition = object.getString("terms");
            estimate_date = MyDateFormat.GetDate(object.getString("date"));

          //  due_date = MyDateFormat.GetDate(object.getString("estimate_due_date"));
            schedule_on = MyDateFormat.GetDate(object.getString("estimate_schedule"));
           // late_feeId = object.getString("late_fee_id");
            estimateNoTV.setText(estimate_no);
            estimate_dateTV.setText(estimate_date);


            clientAdd = object.getJSONObject("client").getString("address");
            try {
                clientCurrency = object.getJSONObject("client").getString("currency");
            } catch (JSONException e) {
                e.printStackTrace();
            }
            clientId = object.getJSONObject("client").getString("client_id");
            clientName = object.getJSONObject("client").getString("client_name");
            clientTV.setText(clientName);
            itemList = new ArrayList<>();


            //set item

            for (int i = 0; i < object.getJSONObject("items").getJSONArray("item").length(); i++) {

                JSONObject itemObj = object.getJSONObject("items").getJSONArray("item").getJSONObject(i);
                ItemModel model = new ItemModel();
                model.setId(itemObj.getString("item_id"));
                model.setType(itemObj.getString("type"));
                model.setName(itemObj.getString("name"));
                model.setDescription(itemObj.getString("description"));
                model.setUnit_cost(itemObj.getString("unit_cost"));
                model.setQuantity(itemObj.getString("quantity"));
                model.setDiscountAmount(itemObj.getString("discount"));
                model.setDiscount_type(itemObj.getString("discount_type"));
                model.setTax1_name(itemObj.getString("tax1_name"));
                model.setTax2_name(itemObj.getString("tax2_name"));
                model.setTax1_percent(itemObj.getString("tax1_percent"));
                model.setTax2_percent(itemObj.getString("tax2_percent"));
                model.setTax1Id(itemObj.getString("tax1_id"));
                model.setTax2Id(itemObj.getString("tax2_id"));
                model.setTotalValue(itemObj.getString("total_priceValue"));

                double tax1 = 0, tax2 = 0;

                try {
                    tax1 = Double.parseDouble(itemObj.getString("tax1_value").replaceAll(",", ""));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                try {
                    tax2 = Double.parseDouble(itemObj.getString("tax2_value").replaceAll(",", ""));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                } catch (JSONException e) {
                    e.printStackTrace();
                }


               // model.setTotalTAx((tax1 + tax2) + "");
                itemList.add(model);
            }

            isDiscountFlat = true;

            if (object.getString("EstimateWiseDiscountType").equalsIgnoreCase("Percent")) {

                isDiscountFlat = false;
                flatButton.setChecked(false);
                percentButton.setChecked(true);

            }

            discountEt.setText(object.getString("EstimateWiseDiscountValue"));


            // addtional value

            additionalChargesAdapter.selectedItemList = new ArrayList<>();
            for (int i = 0; i < object.getJSONObject("additional_charges").getJSONArray("charge").length(); i++) {

                HashMap<String, String> map = new HashMap<>();
                map.put(Constant.KEY_NAME, object.getJSONObject("additional_charges").getJSONArray("charge").getJSONObject(i).getString("name"));
                map.put(Constant.KEY_TYPE, object.getJSONObject("additional_charges").getJSONArray("charge").getJSONObject(i).getString("type"));
                map.put(Constant.KEY_VALUE, object.getJSONObject("additional_charges").getJSONArray("charge").getJSONObject(i).getString("amount"));
                additionalChargesAdapter.selectedItemList.add(map);

            }
            additionalChargesAdapter.notifyDataSetChanged();

            //set tax

            taxListAdapter.selectedItemList = new ArrayList<>();
     /*       for (int i = 0; i < object.getJSONObject("taxes").getJSONArray("tax").length(); i++) {

                HashMap<String, String> map = new HashMap<>();
                map.put(Constant.KEY_NAME, object.getJSONObject("taxes").getJSONArray("tax").getJSONObject(i).getString("name"));
                map.put(Constant.KEY_TYPE, object.getJSONObject("taxes").getJSONArray("tax").getJSONObject(i).getString("type"));
                map.put(Constant.KEY_VALUE, object.getJSONObject("taxes").getJSONArray("tax").getJSONObject(i).getString("amount"));
                map.put(Constant.KEY_VALUE, object.getJSONObject("taxes").getJSONArray("tax").getJSONObject(i).getString("amount"));

                taxListAdapter.selectedItemList.add(map);

            }*/
            taxListAdapter.notifyDataSetChanged();

/*            AllowPartialPaymentCheckBox.setChecked(false);
            if (!object.getString("IsPartialPayment").equalsIgnoreCase("N"))
                AllowPartialPaymentCheckBox.setChecked(true);*/

            if (!itemList.isEmpty()) {
                selectItemTV.setVisibility(View.GONE);
                AddItemView.setVisibility(View.VISIBLE);

            }
            totalPaid = 0;
            if (object.has("total_paid")) {

                if (!object.getString("total_paid").isEmpty()) {
                    try {
                        totalPaid = Double.parseDouble(object.getString("total_paid").replaceAll(",", ""));
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
            //payment method
            selectedPaymentGatewayListList = new ArrayList<>();
            if (object.has("payment_method")) {

                JSONArray paymentArray = object.getJSONArray("payment_method");
                for (int i = 0;
                     i < paymentArray.length(); i++) {
                    HashMap<String, String> map = new HashMap<>();
                    map.put(Constant.KEY_ID, paymentArray.getString(i));
                    selectedPaymentGatewayListList.add(map);

                }


            }


            updateIem();
            ;

        } catch (JSONException e) {
            e.printStackTrace();
        }


    }    // create invoice remote call to web and sending data

    @SuppressWarnings("rawtypes")
    private void createEstimate() {

        try {
            JSONObject CreateEstimate = new JSONObject();

            JSONObject obj1 = null;
            JSONArray itemsarray = new JSONArray();
            try {
                for (int i = 0; i < itemList.size(); i++) {
                    obj1 = new JSONObject();
                    ItemModel item = itemList.get(i);

                    obj1.put("name", item.getName());
                    obj1.put("type", item.getType());
                    obj1.put("description", item.getDescription());

                    try {
                        obj1.put("quantity",
                                Double.parseDouble(item.getQuantity().replaceAll(",", "")) + "");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                        obj1.put("quantity", item.getQuantity());
                    }

                    try {
                        obj1.put("unit_cost", Double.parseDouble(item.getUnit_cost().replaceAll(",", "")) + "");
                    } catch (Exception Ex) {
                        obj1.put("unit_cost", item.getUnit_cost());
                    }
                    obj1.put("discount", item.getDiscountAmount());
                    obj1.put("discount_type", item.getDiscount_type());
                    obj1.put("tax1_id", item.getTax1Id());
                    obj1.put("tax2_id", item.getTax2Id());
                    itemsarray.put(obj1);
                }
            } catch (JSONException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            JSONObject item = new JSONObject();
            item.put("item", itemsarray);

            JSONArray chargesarray = new JSONArray();


            for (int i = 0; i < additionalChargesAdapter.selectedItemList.size(); i++) {
                obj1 = new JSONObject();
                obj1.put("name", additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_NAME));
                obj1.put("type", additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_TYPE));
                obj1.put("amount", additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_VALUE));
                obj1.put("id", additionalChargesAdapter.selectedItemList.get(i).get(Constant.KEY_ID));
                chargesarray.put(obj1);

            }
            JSONObject charge = new JSONObject();
            charge.put("additional_charge", chargesarray);

            JSONArray taxarray = new JSONArray();

            for (int i = 0; i < taxListAdapter.selectedItemList.size(); i++) {


                taxarray.put(taxListAdapter.selectedItemList.get(i).get(Constant.KEY_ID));
            }

            JSONObject tax = new JSONObject();
            tax.put("tax_ids", taxarray);
            JSONArray paymentsgatewayarray = new JSONArray();
            String isPartialPayment;

            for (int i = 0; i < selectedPaymentGatewayListList.size(); i++) {


                paymentsgatewayarray.put(selectedPaymentGatewayListList.get(i).get(Constant.KEY_ID));
            }
            if (AllowPartialPaymentCheckBox.isChecked()) {
                isPartialPayment = "Y";
            } else {
                isPartialPayment = "N";
            }
            CreateEstimate.put("isPartialPayment", isPartialPayment);
            JSONObject client = new JSONObject();

            client.put("client_id", clientId);
            Log.e("Chk--:::7", clientId + "---------------------");
            JSONObject Jdiscount = new JSONObject();
            Jdiscount.put("type", discount_type);
            Jdiscount.put("amount", discountEt.getText().toString());

            CreateEstimate.put("payment_gateway_ids", paymentsgatewayarray);
            CreateEstimate.put("client", client);
            CreateEstimate.put("discount", Jdiscount);

            if (!isEditing) {
                CreateEstimate.put("method", "createEstimate");
            } else {
                CreateEstimate.put("estimate_id", estimateId);
                CreateEstimate.put("method", "updateEstimate");
            }

            CreateEstimate.put("send_mail", send_mail);

            CreateEstimate.put("estimate_title", estimate_title);

            //CreateEstimate.put(GlobalVariables.TAG_CREATED_BY, ConstantList.userId);

            CreateEstimate.put("number", estimate_no);
            CreateEstimate.put("date", estimate_date);
          //  CreateEstimate.put("due_date", due_date);
            //CreateEstimate.put("late_fee", late_feeId);
            CreateEstimate.put("schedule_date", schedule_on);
            CreateEstimate.put("payment_term", "");

            CreateEstimate.put("status", "");
            CreateEstimate.put("notes", estimate_note);
            CreateEstimate.put("terms", term_condition);
            CreateEstimate.put("items", item);
            CreateEstimate.put("taxes", tax);
            CreateEstimate.put("additional_charges", charge);


            JSONObject CreateEstimateMainObj = new JSONObject();
            JSONArray CreateEstimateArray = new JSONArray();


            //save request in database

            values = new ContentValues();
            values.put(DatabaseHelper.JSON_DATA, CreateEstimate.toString());

            if (!isEditing) {
                values.put(DatabaseHelper.TYPE, Constant.KEY_CREATE);
                db.insert(DatabaseHelper.Table_CreateOfflineEstimate, values);

                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_CreateOfflineEstimate + " WHERE " + DatabaseHelper.TYPE + "='" + Constant.KEY_CREATE + "'";
            } else {
                values.put(DatabaseHelper.TYPE, Constant.KEY_EDIT);
                db.insert(DatabaseHelper.Table_CreateOfflineEstimate, values);


                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_CreateOfflineEstimate + " WHERE " + DatabaseHelper.TYPE + "='" + Constant.KEY_EDIT + "'";
            }


            cursor = db.getRecords(selectQuery);
            JSONObject object = null;
            if (cursor.moveToFirst() && cursor.getCount() > 0)
                for (int i = 0; i < cursor.getCount(); i++) {

                    try {
                        object = new JSONObject(cursor.getString(cursor.getColumnIndex(DatabaseHelper.JSON_DATA)));
                        CreateEstimateArray.put(i, object);


                    } catch (JSONException e) {
                        e.printStackTrace();
                    }


                }


            if (!isEditing)
                CreateEstimateMainObj.put("createEstimate", CreateEstimateArray);
            else {
                CreateEstimateMainObj.put("updateEstimate", CreateEstimateArray);
            }

            Log.i("Look %%%%%%%%%%::", isEditing + "**********" + CreateEstimateMainObj.toString());
            if (global.isNetworkAvailable()) {
                WebRequest request = new WebRequest(context, CreateEstimateMainObj, Constant.invoicelistURL, Constant.SERVICE_TYPE.CREATE, Constant.token, this, true);
                request.execute();
            } else {

                FragmentManager fm = getActivity().getSupportFragmentManager();
                for (int i = 0; i < fm.getBackStackEntryCount(); ++i) {
                    fm.popBackStack();
                }
                global.showAlert("Estimate is saved and it will be update when connect to internet", context);
                fragmentChanger.onFragmentReplace(new HomePageFragment(), new Bundle());

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}




