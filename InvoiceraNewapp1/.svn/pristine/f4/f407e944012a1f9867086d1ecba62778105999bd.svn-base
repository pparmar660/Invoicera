package com.invoicera.androidapp;

import android.app.DatePickerDialog;
import android.content.ContentValues;
import android.database.Cursor;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.util.Log;
import android.util.TypedValue;
import android.view.View;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.invoicera.Database.DatabaseHelper;
import com.invoicera.GlobalData.Constant;
import com.invoicera.Webservices.WebApiResult;
import com.invoicera.Webservices.WebRequest;
import com.invoicera.model.ClientAttribute;

import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

/**
 * Created by vinove on 12/6/15.
 */
public class Filter extends BaseActivity implements View.OnClickListener, WebApiResult {


    String InvoiceStatusArray[] = {"Draft", "Sent", "Paid", "Disputed", "Resolved", "Partial-Paid", "Viewed", "Outstanding", "Auto-Paid", "Auto-Failed"};


    EditText fromET, toEt;

    boolean isFromDate = false;
    String StatusArray[] = {"Active", "Archived", "Deleted"};
    TextView ApplyTV;
    ContentValues values;
    Calendar myCalendar;
    TextView invoiceStTV, clientTV, dateTV, statusTV;
    //  ListView clientListView;
    DatabaseHelper db;
    ArrayList<ClientAttribute> clientList;
    LinearLayout invoiceStLiner, clientLiner, dateLiner, statusLiner;

    RadioGroup clientRadioGroup, statusRadioGroup, invoiceStatusRadioGroup;

    int[] selectedImg = {R.drawable.status_selected, R.drawable.client_selected, R.drawable.active_selected, R.drawable.calender_selected};


    int[] unSelectedImg = {R.drawable.status, R.drawable.client, R.drawable.active, R.drawable.calender};
    DatePickerDialog.OnDateSetListener date;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.filter);
        clientList = new ArrayList<>();
        ApplyTV = (TextView) findViewById(R.id.apply);
        invoiceStTV = (TextView) findViewById(R.id.invoice_st);
        clientTV = (TextView) findViewById(R.id.client);
        statusTV = (TextView) findViewById(R.id.status);
        dateTV = (TextView) findViewById(R.id.date);
        invoiceStLiner = (LinearLayout) findViewById(R.id.inv_st_liner);
        clientRadioGroup = (RadioGroup) findViewById(R.id.clientRadioGroup);
        invoiceStatusRadioGroup = (RadioGroup) findViewById(R.id.inv_st_group);
        statusRadioGroup = (RadioGroup) findViewById(R.id.st_group);
        fromET = (EditText) findViewById(R.id.from);
        toEt = (EditText) findViewById(R.id.to);
        clientLiner = (LinearLayout) findViewById(R.id.client_list_liner);
        dateLiner = (LinearLayout) findViewById(R.id.date_liner);
        statusLiner = (LinearLayout) findViewById(R.id.status_liner);
        invoiceStTV.setOnClickListener(this);
        db = new DatabaseHelper(context);
        clientTV.setOnClickListener(this);
        statusTV.setOnClickListener(this);
        dateTV.setOnClickListener(this);
        ApplyTV.setOnClickListener(this);

        myCalendar = Calendar.getInstance();
        date = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int year, int monthOfYear,
                                  int dayOfMonth) {
                // TODO Auto-generated method stub
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, monthOfYear);
                myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                updateLabel();
            }

        };

        fromET.setOnClickListener(this);
        toEt.setOnClickListener(this);

    }

    private void updateLabel() {

        String myFormat = "MM/dd/yy"; //In which you need put here
        SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);
        if (isFromDate)
            fromET.setText(sdf.format(myCalendar.getTime()));
        else
            toEt.setText(sdf.format(myCalendar.getTime()));

    }

    @Override
    public void onClick(View v) {

        switch (v.getId()) {
            case R.id.invoice_st:
                setSlectedPos(v.getId());
                break;
            case R.id.client:
                setSlectedPos(v.getId());
                setClientList();

                break;
            case R.id.status:
                setSlectedPos(v.getId());

                break;
            case R.id.date:
                setSlectedPos(v.getId());

                break;
            case R.id.from:
                isFromDate = true;
                new DatePickerDialog(this, date, myCalendar
                        .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                        myCalendar.get(Calendar.DAY_OF_MONTH)).show();
                break;
            case R.id.to:
                isFromDate = false;
                new DatePickerDialog(this, date, myCalendar
                        .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                        myCalendar.get(Calendar.DAY_OF_MONTH)).show();

                break;

            case R.id.apply:
                System.out.println("Click");

                int radioButtonID = statusRadioGroup.getCheckedRadioButtonId();
                View radioButton = statusRadioGroup.findViewById(radioButtonID);
                int idx = statusRadioGroup.indexOfChild(radioButton);
                String status = StatusArray[idx];


                radioButtonID = invoiceStatusRadioGroup.getCheckedRadioButtonId();
                radioButton = invoiceStatusRadioGroup.findViewById(radioButtonID);
                idx = invoiceStatusRadioGroup.indexOfChild(radioButton);

                String invoice_status = InvoiceStatusArray[idx];


                String clientId = clientRadioGroup.getCheckedRadioButtonId() + "";

                String fromDate = fromET.getText().toString();
                String todate = toEt.getText().toString();


                System.out.println(invoice_status + "," + status + "," + clientId + "," + fromDate + "," + todate);

                break;


        }


    }


    public void setSlectedPos(int id) {


        List<TextView> textViews = new ArrayList<>();
        textViews.add(invoiceStTV);
        textViews.add(clientTV);
        textViews.add(statusTV);
        textViews.add(dateTV);
        List<LinearLayout> linearLayouts = new ArrayList<>();
        linearLayouts.add(invoiceStLiner);
        linearLayouts.add(clientLiner);
        linearLayouts.add(statusLiner);
        linearLayouts.add(dateLiner);


        for (int i = 0; i < textViews.size(); i++) {

            Drawable drawable;
            if (textViews.get(i).getId() == id) {
                textViews.get(i).setBackgroundColor(getResources().getColor(R.color.orange2));
                linearLayouts.get(i).setVisibility(View.VISIBLE);
                drawable = getResources().getDrawable(selectedImg[i]);
                textViews.get(i).setTextColor(getResources().getColor(R.color.white));

            } else {

                textViews.get(i).setBackground(getResources().getDrawable(R.drawable.unslected_filter_background));
                linearLayouts.get(i).setVisibility(View.GONE);
                drawable = getResources().getDrawable(unSelectedImg[i]);

                textViews.get(i).setTextColor(Color.parseColor("#999999"));


            }


            textViews.get(i).setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);

        }


    }


    private void setClientList() {


        {
            try {
                JSONObject obj = new JSONObject();

                obj.put(Constant.KEY_METHOD, "listClient");
                WebRequest request = new WebRequest(context, obj,
                        Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_LIST, this, true);
                request.execute();
            } catch (JSONException e) {


                Log.v("Json Exception", e.getMessage());
            }



		/*
         * WebRequest request = new WebRequest(context, obj,
		 * Constant.forgotPasswordURL, type, this); request.execute();
		 */



            /*String selectQuery = "Select " + InvoiceList.table_field[0]
                    + " From " + DatabaseHelper.Table_InvoiceList + " WHERE "
                    + InvoiceList.table_field[0] + " !='' AND "
                    + InvoiceList.table_field[0] + " IS NOT NULL";

            Cursor cursor = db.getRecords(selectQuery);
      *//*  Toast.makeText(
                context,
                "cusror Length " + position + "," + cursor.getCount() + ","
                        + cursor.moveToFirst(), Toast.LENGTH_SHORT).show();*//*
            try {
                if (cursor.moveToFirst() && cursor.getCount() > 0) {
                    for (int i = 0; i < cursor.getCount(); i++) {

                        updateUI(new JSONObject(cursor.getString(cursor
                                .getColumnIndex(InvoiceList.table_field[position]))));

                        getInvoiveList(1, Constant.SERVICE_TYPE.GET_UPPER_DATA, false,
                                InvoiceList.content[position]);

                    }
                } else {

                    getInvoiveList(1, Constant.SERVICE_TYPE.GET_UPPER_DATA, true,
                            InvoiceList.content[position]);

                }

            } catch (JSONException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }*/

        }


    }


    @Override
    public void getWebResult(Constant.SERVICE_TYPE type, JSONObject result) {


        switch (type) {

            case GET_LIST:
                db.ClearTable(DatabaseHelper.TAble_ClientList);
                values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString()); // Contact
                db.insert(DatabaseHelper.TAble_ClientList, values);

                String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.TAble_ClientList;

                Cursor cursor = db.getRecords(selectQuery);
                clientList = new ArrayList<>();

                if (cursor.moveToFirst() && cursor.getCount() > 0)
                    for (int i = 0; i < cursor.getCount(); i++) {

                        try {

                            JSONObject object = new JSONObject(cursor.getString(cursor
                                    .getColumnIndex(DatabaseHelper.JSON_DATA)));

                            ClientAttribute attribute = new ClientAttribute();
                            for (int j = 0; j < object.getJSONObject("clients").getJSONArray("client").length(); j++) {
                                attribute.setClientId(object.getJSONObject("clients").getJSONArray("client").getJSONObject(j).getString("client_id"));

                                attribute.setClientName(object.getJSONObject("clients").getJSONArray("client").getJSONObject(j).getString("name"));

                                attribute.setOrganizationname(object.getJSONObject("clients").getJSONArray("client").getJSONObject(j).getString("organization"));

                                attribute.setClientUserCompanyId(object.getJSONObject("clients").getJSONArray("client").getJSONObject(j).getString("fkClientUserCompanyID"));

                                clientList.add(attribute);

                                RadioButton button = new RadioButton(context);
                                button.setId(Integer.parseInt(attribute.getClientId()));
                                button.setText(attribute.getClientName());
                                button.setButtonDrawable(R.drawable.custom_checkbox_selector);
                                button.setTextColor(Color.parseColor("#3E3E3E"));
                                button.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
                                int padVal = (int) global.convertDpToPixel(10, context);
                                button.setPadding(padVal, padVal, padVal, padVal);
                                button.setLayoutParams(new RadioGroup.LayoutParams(
                                        LinearLayout.LayoutParams.WRAP_CONTENT,
                                        LinearLayout.LayoutParams.WRAP_CONTENT));
                                clientRadioGroup.addView(button);


                            }


                        } catch (JSONException e) {


                        }
                    }

                break;

        }
    }

}
