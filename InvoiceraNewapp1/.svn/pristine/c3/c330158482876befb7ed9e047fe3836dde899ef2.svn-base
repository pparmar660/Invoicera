package com.invoicera.Fragment;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import com.invoicera.CustomView.FloatingAction;
import com.invoicera.Database.DatabaseHelper;
import com.invoicera.GlobalData.Constant;
import com.invoicera.InterFace.WebApiResult;
import com.invoicera.ListViewAdpter.ClientListAdapter;
import com.invoicera.ViewPagerFragment.EstimateCreateEditPagerFragment;
import com.invoicera.Webservices.WebRequest;
import com.invoicera.androidapp.AddCredit;
import com.invoicera.androidapp.ClientPreview;
import com.invoicera.androidapp.CreateEditClient;
import com.invoicera.androidapp.Home;
import com.invoicera.androidapp.R;
import com.invoicera.listener.FragmentChanger;
import com.invoicera.model.ClientAttribute;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionButton;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionHelper;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionLayout;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RFACLabelItem;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RapidFloatingActionContentLabelList;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

/**
 * Created by vinove on 13/8/15.
 */
public class ClientList extends BaseFragment implements
        WebApiResult, View.OnClickListener, RapidFloatingActionContentLabelList.OnRapidFloatingActionContentLabelListListener {


    public ImageView searchCancelImg;
    public RelativeLayout actionRelative;
    public TableLayout actionTable;
    public ImageView closeActionPopUp;
    public TableRow deleteLinear, archiveLinear, restoreLinear, addInvoiceLinear, addEstimateLinear, addCreditLinear, editClientLiner;
    boolean isActionPopOpen = false;
    WebApiResult webApiResult;
    private RapidFloatingActionLayout rfaLayout;
    private RapidFloatingActionHelper rfabHelper;
    private RapidFloatingActionButton rfaButton;
    RapidFloatingActionContentLabelList rfaContent;
    public boolean isSearchEnable = false;
    int selectedClientPosition = 0;
    DatabaseHelper db;

    FragmentChanger fragmentChanger;

    public TextView deleteTV, archiveTV, ClientNameTV, activeTV;

    //public String clientId;


    View view;

    public EditText searchEt;
    WebRequest request;


    ArrayList<ClientAttribute> clientModels;
    ClientListAdapter adapter;


    ListView listView;
    FloatingAction floatingAction;

    //TextView addInvoiceTv,addEstimateTv,deleteClient,archiveClient,restoreClient,addCredit;


    @Override
    public View onCreateView(LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {

        final View view = inflater.inflate(R.layout.client_list, container,
                false);


        searchEt = (EditText) view.findViewById(R.id.searchEdit);

        listView = (ListView) view.findViewById(R.id.clientList);
        clientModels = new ArrayList<>();

        searchCancelImg = (ImageView) view.findViewById(R.id.searchCancel);
        actionTable = (TableLayout) view.findViewById(R.id.actionTable);
        searchCancelImg.setOnClickListener(this);
        closeActionPopUp = (ImageView) view.findViewById(R.id.closeAction);
        actionRelative = (RelativeLayout) view.findViewById(R.id.actionRelative);
        deleteTV = (TextView) view.findViewById(R.id.delete);
        archiveTV = (TextView) view.findViewById(R.id.archive);
        ClientNameTV = (TextView) view.findViewById(R.id.clientName);

        activeTV = (TextView) view.findViewById(R.id.active);


        restoreLinear = (TableRow) view.findViewById(R.id.restoreLinear);
        deleteLinear = (TableRow) view.findViewById(R.id.deleteLinear);
        archiveLinear = (TableRow) view.findViewById(R.id.archiveLinear);
        addInvoiceLinear = (TableRow) view.findViewById(R.id.addInvoiceLinear);
        addEstimateLinear = (TableRow) view.findViewById(R.id.addEstimateLinear);
        addCreditLinear = (TableRow) view.findViewById(R.id.addCreditLinear);
        editClientLiner = (TableRow) view.findViewById(R.id.editClientLinear);


        webApiResult = this;
        activeTV.setOnClickListener(this);
        deleteTV.setOnClickListener(this);
        archiveTV.setOnClickListener(this);
        addCreditLinear.setOnClickListener(this);
        deleteLinear.setOnClickListener(this);
        addInvoiceLinear.setOnClickListener(this);
        addEstimateLinear.setOnClickListener(this);
        restoreLinear.setOnClickListener(this);
        archiveLinear.setOnClickListener(this);
        editClientLiner.setOnClickListener(this);
        actionRelative.setOnClickListener(this);

        closeActionPopUp.setOnClickListener(this);

        searchCancelImg.setVisibility(View.GONE);
        db = new DatabaseHelper(context);
        searchCancelImg.setOnClickListener(this);


        ///floating tap-------------
        rfaContent = new RapidFloatingActionContentLabelList(context);
        rfaButton = (RapidFloatingActionButton) view.findViewById(R.id.label_list_sample_rfab);
        rfaLayout = (RapidFloatingActionLayout) view.findViewById(R.id.label_list_sample_rfal);

        rfaContent.setOnRapidFloatingActionContentLabelListListener(this);
        String backColor = "#00000";

        floatingAction = new FloatingAction(context, fragmentChanger, rfaLayout, rfaButton, rfaContent);


        //client list


        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (!global.isNetworkAvailable()) {
                    global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);
                    return;
                }

                Intent i = new Intent(context, ClientPreview.class);
                i.putExtra(Constant.KEY_CLIENT_ID, clientModels.get(position).getClientId());

                getActivity().startActivityForResult(i, Constant.requestCodeClientPreview);

            }
        });

        listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {


                if (!global.isNetworkAvailable()) {
                    global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);
                    return true;
                }

   /*             if (isActionPopOpen)
                    return true;*/

                isActionPopOpen = true;
                //selectClientId = clientModels.get(position).getClientId();
                selectedClientPosition = position;
                actionRelative.setVisibility(View.VISIBLE);
                //clientId = clientModels.get(position).getClientId();
                ClientNameTV.setText(clientModels.get(position).getOrganizationname());


                if (clientModels.get(position).getStatus().equalsIgnoreCase("Cancel") || clientModels.get(position).getStatus().equalsIgnoreCase("Deleted")) {
                    restoreLinear.setVisibility(View.VISIBLE);
                    deleteLinear.setVisibility(View.GONE);
                    archiveLinear.setVisibility(View.GONE);


                } else if (clientModels.get(position).getStatus().equalsIgnoreCase("Archived")) {

                    restoreLinear.setVisibility(View.VISIBLE);
                    deleteLinear.setVisibility(View.VISIBLE);
                    archiveLinear.setVisibility(View.GONE);

                } else {

                    restoreLinear.setVisibility(View.GONE);
                    deleteLinear.setVisibility(View.VISIBLE);
                    archiveLinear.setVisibility(View.VISIBLE);
                }

                animation(actionTable, R.anim.bottom_up, Constant.LIST_ACTION_ANIMATION_TYPE.OPEN);


                return true;
            }
        });

        searchEt.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                    try {


                        JSONObject obj = new JSONObject();

                        obj.put(Constant.KEY_METHOD, "searchClient");
                        obj.put(Constant.KEY_PAGE_NO, "1");
                        obj.put(Constant.KEY_PAGE_PER_REORD, 200);
                        obj.put(Constant.KEY_STATUS, "");

                        obj.put("searchText", searchEt.getText());


                        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
                        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);


                        WebRequest request = new WebRequest(context, obj,
                                Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_SEARCH_DATA, Constant.token, webApiResult, true);
                        if (global.isNetworkAvailable())
                            request.execute();
                        else {
                            global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);
                            isSearchEnable = true;


                            searchCancelImg.setVisibility(View.VISIBLE);
                        }

                    } catch (JSONException e) {

                        Log.i("exception", e.getMessage());

                    }
                    return true;
                }
                return false;
            }
        });


        return view;

    }

    @Override
    public void onResume() {
        super.onResume();
        Home.toolbarText.setText("Clients");
        String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                + " From " + DatabaseHelper.TAble_ClientList;

        Cursor cursor = db.getRecords(selectQuery);


        boolean isShowProgressBar = false;
        if (cursor.moveToFirst() && cursor.getCount() > 0) {
            setClientList();
        } else isShowProgressBar = true;


        JSONObject obj = new JSONObject();
        try {
            obj.put(Constant.KEY_METHOD, "listClient");
        } catch (JSONException e) {
            e.printStackTrace();
        }
        request = new WebRequest(context, obj, Constant.invoicelistURL, Constant.SERVICE_TYPE.GET_LIST, Constant.token, this, isShowProgressBar);
        request.execute();
        Home.progressBarHome.setVisibility(View.VISIBLE);

    }


    @Override
    public void onAttach(Activity activity) {
        // TODO Auto-generated method stub
        fragmentChanger = (FragmentChanger) activity;

        super.onAttach(activity);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);


    }


    @Override
    public void onClick(View v) {
        Intent i;
        Bundle arguments;

        switch (v.getId()) {

            case R.id.closeAction:
                animation(actionTable, R.anim.bottom_down, Constant.LIST_ACTION_ANIMATION_TYPE.CLOSE);
                break;

            case R.id.searchCancel:

                setClientList();
                searchEt.setText("");
                searchCancelImg.setVisibility(View.GONE);

                break;

            case R.id.addInvoiceLinear:


                arguments = new Bundle();
                arguments.putString(Constant.KEY_ADDRESS, clientModels.get(selectedClientPosition).getAddress());
                arguments.putString(Constant.KEY_CLIENT_NAME, clientModels.get(selectedClientPosition).getClientName());
                arguments.putString(Constant.KEY_ORGANIZATION, clientModels.get(selectedClientPosition).getOrganizationname());
                arguments.putString(Constant.KEY_CLIENT_ID, clientModels.get(selectedClientPosition).getClientId());
                arguments.putString(Constant.KEY_CLIENT_CURRENCY, clientModels.get(selectedClientPosition).getClientCurrency());


                isActionPopOpen = false;

                actionRelative.setVisibility(View.GONE);
                fragmentChanger.onFragmentReplace(new InvoicePreviewCreateFragment(), arguments);
                break;
            case R.id.addEstimateLinear:
                arguments = new Bundle();
                arguments.putString(Constant.KEY_ADDRESS, clientModels.get(selectedClientPosition).getAddress());
                arguments.putString(Constant.KEY_CLIENT_NAME, clientModels.get(selectedClientPosition).getClientName());
                arguments.putString(Constant.KEY_ORGANIZATION, clientModels.get(selectedClientPosition).getOrganizationname());
                arguments.putString(Constant.KEY_CLIENT_ID, clientModels.get(selectedClientPosition).getClientId());
                arguments.putString(Constant.KEY_CLIENT_CURRENCY, clientModels.get(selectedClientPosition).getClientCurrency());


                isActionPopOpen = false;

                actionRelative.setVisibility(View.GONE);
                fragmentChanger.onFragmentReplace(new EstimateCreateEditPagerFragment(), arguments);
                break;
            case R.id.addCreditLinear:

                i = new Intent(context, AddCredit.class);
                i.putExtra(Constant.KEY_CLIENT_ID, clientModels.get(selectedClientPosition).getClientId());
                i.putExtra(Constant.KEY_CLIENT_NAME, clientModels.get(selectedClientPosition).getClientName());
                i.putExtra(Constant.KEY_CURRENCY, clientModels.get(selectedClientPosition).getClientCurrency());
                i.putExtra(Constant.KEY_OUTSTANDING, clientModels.get(selectedClientPosition).getOutStanding());
                i.putExtra(Constant.KEY_CREDIT, clientModels.get(selectedClientPosition).getCredit());
                i.putExtra(Constant.KEY_COMPANY_ID, clientModels.get(selectedClientPosition).getClientUserCompanyId());
                startActivity(i);

                isActionPopOpen = false;

                actionRelative.setVisibility(View.GONE);
                break;

            case R.id.editClientLinear:

                i = new Intent(context, CreateEditClient.class);
                i.putExtra(Constant.KEY_CLIENT_ID, clientModels.get(selectedClientPosition).getClientId());
                startActivity(i);

                isActionPopOpen = false;
                actionRelative.setVisibility(View.GONE);

                break;
            case R.id.delete:
            case R.id.deleteLinear:

                DeleteClientAlert();
                isActionPopOpen = false;
                actionRelative.setVisibility(View.GONE);
                break;

            case R.id.archiveLinear:

                if (global.isNetworkAvailable()) {


                    try {
                        JSONObject deleteClient = new JSONObject();
                        deleteClient.put("client_id", clientModels.get(selectedClientPosition).getClientId());
                        deleteClient.put("type", "Archived");// Cancel - >delete ,
                        // Archived->Archived
                        JSONObject deleteClientObj = new JSONObject();
                        deleteClientObj.put("deleteClient", deleteClient);


                        request = new WebRequest(context, deleteClientObj, Constant.invoicelistURL, Constant.SERVICE_TYPE.DELETE, Constant.token, webApiResult, true);
                        request.execute();
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                } else global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);

                isActionPopOpen = false;
                actionRelative.setVisibility(View.GONE);
                break;
            case R.id.restoreLinear:

                if (global.isNetworkAvailable()) {


                    try {
                        JSONObject deleteClient = new JSONObject();
                        deleteClient.put("client_id", clientModels.get(selectedClientPosition).getClientId());
                        deleteClient.put("type", "Active");// Cancel - >delete ,
                        // Archived->Archived
                        JSONObject deleteClientObj = new JSONObject();
                        deleteClientObj.put("deleteClient", deleteClient);


                        request = new WebRequest(context, deleteClientObj, Constant.invoicelistURL, Constant.SERVICE_TYPE.DELETE, Constant.token, webApiResult, true);
                        request.execute();
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                } else global.showAlert(Constant.NO_CONNECTION_MESSAGE, context);

                isActionPopOpen = false;
                actionRelative.setVisibility(View.GONE);
                break;

        }


    }


    @Override
    public void onPause() {
        super.onPause();
        if (request != null)
            request.cancel(true);
        Log.e("pause", "");

    }

    @Override
    public void getWebResult(Constant.SERVICE_TYPE type, JSONObject result) {

        if (result == null)
            return;

        searchEt.setText("");

        try {
            if (!result.getString("code").equalsIgnoreCase("200")) {
                if (result.has("message"))
                    //    global.showAlert(result.getString("message"), context);
                    Toast.makeText(context, result.getString("message").toString(), Toast.LENGTH_SHORT).show();
                return;
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }


        switch (type) {

            case GET_LIST:
                db.ClearTable(DatabaseHelper.TAble_ClientList);
                ContentValues values = new ContentValues();
                values.put(DatabaseHelper.JSON_DATA, result.toString());
                db.insert(DatabaseHelper.TAble_ClientList, values);

                String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.TAble_ClientList;

                Cursor cursor = db.getRecords(selectQuery);


                if (cursor.moveToFirst() && cursor.getCount() > 0) {
                    setClientList();
                }
                break;

            case GET_SEARCH_DATA:


                searchCancelImg.setVisibility(View.VISIBLE);

                clientModels = new ArrayList<>();

                ClientAttribute map;
                JSONObject object = result;

                try {
                    for (int k = 0; k < object.getJSONObject("clients").getJSONArray("client").length(); k++) {
                        map = new ClientAttribute();
                        JSONObject chargeObj = object.getJSONObject("clients").getJSONArray("client").getJSONObject(k);

                        map.setClientName(chargeObj.getString("name"));
                        map.setClientId(chargeObj.getString("client_id"));
                        map.setAddress(chargeObj.getString("address"));
                        map.setClientCurrency(chargeObj.getString("currency"));
                        map.setOrganizationname(chargeObj.getString("organization"));
                        map.setOutStanding(chargeObj.getString("outstanding"));
                        map.setCredit(chargeObj.getString("credit_amount"));
                        map.setEmailID(chargeObj.getString("email"));
                        map.setClientCurrency(chargeObj.getString("currency"));
                        map.setClientUserCompanyId(chargeObj.getString("fkClientUserCompanyID"));
                        if (chargeObj.has("status"))
                            map.setStatus(chargeObj.getString("status"));
                        clientModels.add(map);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }


                adapter = new ClientListAdapter(context, clientModels);
                listView.setAdapter(adapter);


                break;
            case DELETE:

                fragmentChanger.onFragmentReplace(new ClientList(), new Bundle());
                break;


        }


    }


    @Override
    public void onRFACItemLabelClick(int position, RFACLabelItem item) {
        // showToastMessage("clicked label: " + position);

        floatingAction.createFunction(position);

    }

    @Override
    public void onRFACItemIconClick(int position, RFACLabelItem item) {

        floatingAction.createFunction(position);


    }

    public void animation(TableLayout layout, int animationId, final Constant.LIST_ACTION_ANIMATION_TYPE type) {

        android.view.animation.Animation animationInfo;

        animationInfo = AnimationUtils.loadAnimation(getActivity().getApplicationContext(),
                animationId);

        animationInfo.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {

                switch (type) {

                    case OPEN:


                        break;
                    case CLOSE:
                        isActionPopOpen = false;

                        actionRelative.setVisibility(View.GONE);
                        break;

                }

            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });

        layout.startAnimation(animationInfo);


    }


    public void setClientList() {


        String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                + " From " + DatabaseHelper.TAble_ClientList;
        clientModels = new ArrayList<>();

        Cursor cursor = db.getRecords(selectQuery);

        if (cursor.moveToFirst() && cursor.getCount() > 0) {

            clientModels = new ArrayList<>();
            for (int i = 0; i < cursor.getCount(); i++) {

                try {
                    ClientAttribute map;
                    JSONObject object = new JSONObject(cursor.getString(cursor
                            .getColumnIndex(DatabaseHelper.JSON_DATA)));

                    for (int k = 0; k < object.getJSONObject("clients").getJSONArray("client").length(); k++) {
                        map = new ClientAttribute();
                        JSONObject chargeObj = object.getJSONObject("clients").getJSONArray("client").getJSONObject(k);

                        map.setClientName(chargeObj.getString("name"));
                        map.setClientId(chargeObj.getString("client_id"));
                        map.setAddress(chargeObj.getString("address"));
                        map.setClientCurrency(chargeObj.getString("currency"));
                        map.setOrganizationname(chargeObj.getString("organization"));
                        map.setOutStanding(chargeObj.getString("outstanding"));
                        map.setCredit(chargeObj.getString("credit_amount"));
                        map.setEmailID(chargeObj.getString("email"));
                        map.setClientCurrency(chargeObj.getString("currency"));
                        map.setClientUserCompanyId(chargeObj.getString("fkClientUserCompanyID"));
                        if (chargeObj.has("status"))
                            map.setStatus(chargeObj.getString("status"));
                        clientModels.add(map);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

        }
        adapter = new ClientListAdapter(context, clientModels);
        listView.setAdapter(adapter);


    }


    public void DeleteClientAlert() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(
                context);
        alertDialog.setTitle(Constant.title);
        alertDialog.setMessage("Are you sure you want to delete selected client ?");
        alertDialog.setPositiveButton("YES",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        if (global.isNetworkAvailable()) {


                            try {
                                JSONObject deleteClient = new JSONObject();
                                deleteClient.put("client_id", clientModels.get(selectedClientPosition).getClientId());
                                deleteClient.put("type", "Deleted");// Cancel - >delete ,
                                // Archived->Archived
                                JSONObject deleteClientObj = new JSONObject();
                                deleteClientObj.put("deleteClient", deleteClient);


                                request = new WebRequest(context, deleteClientObj, Constant.invoicelistURL, Constant.SERVICE_TYPE.DELETE, Constant.token, webApiResult, true);
                                request.execute();
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }

                    }
                });
        alertDialog.setNegativeButton("NO",
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        dialog.cancel();
                    }
                });
        alertDialog.show();
    }


}
