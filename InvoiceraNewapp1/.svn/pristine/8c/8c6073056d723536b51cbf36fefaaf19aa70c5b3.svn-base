package com.invoicera.androidapp;

import android.app.Activity;
import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioGroup;
import android.widget.Toast;

import com.invoicera.CustomView.CustomPopup;
import com.invoicera.Database.DatabaseHelper;
import com.invoicera.GlobalData.Constant;
import com.invoicera.GlobalData.Constant.SERVICE_TYPE;
import com.invoicera.InterFace.PopUpResult;
import com.invoicera.InterFace.WebApiResult;
import com.invoicera.Webservices.WebRequest;
import com.invoicera.model.InvoiceItem;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;

public class CreateItem extends BaseActivity implements WebApiResult,
        OnClickListener, PopUpResult, RadioGroup.OnCheckedChangeListener {


    InvoiceItem ItemObject;
    EditText quantityEt, unitCostEt, descriptionEt, dicountEt;
    RadioGroup dicountRaioGroup, ItemType;
    ImageView save;
    DatabaseHelper db;
    CustomPopup mypopUp;
    RadioGroup productAndServicesradioGroup;

    ArrayList<HashMap<String, String>> productandlist, servicesList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        super.onCreate(savedInstanceState);


        setContentView(R.layout.create_item);
        save = (ImageView) findViewById(R.id.save);
        save.setOnClickListener(this);
        productandlist = new ArrayList<>();
        db = new DatabaseHelper(context);
        productAndServicesradioGroup = (RadioGroup) findViewById(R.id.itemType);

        productAndServicesradioGroup.setOnCheckedChangeListener(this);


    }

    void sendItem() {

		/*Intent returnIntent = new Intent();
        returnIntent.putExtra(Constant.KEY_ITEM, ItemObject);
		finish();*/

    }

    @Override
    public void getWebResult(SERVICE_TYPE type, JSONObject result) {
        if (result == null)
            return;
        try {
            if (!result.getString("code").equalsIgnoreCase("200")) {
                if (result.has("message"))
                    Toast.makeText(context, result.getString("message").toString(), Toast.LENGTH_SHORT).show();
                return;

            }
        } catch (JSONException e) {
            e.printStackTrace();
        }


        String selectQuery;
        Cursor cursor;
        switch (type) {

            case GET_PRODUCT_LIST:
                selectQuery = "Select " + DatabaseHelper.JSON_DATA
                        + " From " + DatabaseHelper.Table_ProductAndServices;

                cursor = db.getRecords(selectQuery);

                boolean isShowProgressBar = false;
                if (cursor.moveToFirst() && cursor.getCount() > 0) {

                    productandlist = new ArrayList<>();
                    servicesList = new
                            ArrayList<>();
                    for (int i = 0; i < cursor.getCount(); i++) {

                        try {
                            HashMap<String, String> map;

                            JSONObject object = new JSONObject(cursor.getString(cursor
                                    .getColumnIndex(DatabaseHelper.JSON_DATA)));

                            for (int k = 0; k < object.getJSONObject("products").getJSONArray("product").length(); k++) {
                                map = new HashMap<>();
                                JSONObject chargeObj = object.getJSONObject("products").getJSONArray("product").getJSONObject(k);
                                map.put(Constant.KEY_ID, chargeObj.getString("product_id"));
                                map.put(Constant.KEY_NAME, chargeObj.getString("product_name"));
                                map.put(Constant.KEY_UNITCOST, chargeObj.getString("unit_cost"));
                                map.put(Constant.KEY_QUANTITY, chargeObj.getString("quantity"));
                                map.put(Constant.KEY_DESCRIPTION, chargeObj.getString("description"));
                                map.put(Constant.KEY_DATE, chargeObj.getString("date"));


                                productandlist.add(map);
                            }

                            for (int k = 0; k < object.getJSONObject("services").getJSONArray("service").length(); k++) {
                                map = new HashMap<>();
                                JSONObject chargeObj = object.getJSONObject("services").getJSONArray("service").getJSONObject(k);
                                map.put(Constant.KEY_ID, chargeObj.getString("service_id"));
                                map.put(Constant.KEY_NAME, chargeObj.getString("service_name"));
                                map.put(Constant.KEY_UNITCOST, chargeObj.getString("unit_cost"));
                                map.put(Constant.KEY_QUANTITY, chargeObj.getString("quantity"));
                                map.put(Constant.KEY_DESCRIPTION, chargeObj.getString("description"));
                                map.put(Constant.KEY_DATE, chargeObj.getString("date"));


                                servicesList.add(map);
                            }


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        if (true)
                            mypopUp = new CustomPopup((Activity) context, productandlist, Constant.POP_UP.PRODUCT_LIST, true, this);
                        else
                            mypopUp = new CustomPopup((Activity) context, servicesList, Constant.POP_UP.PRODUCT_LIST, true, this);
                        
                        mypopUp.show();

                        break;

                    }
                }
        }
    }

    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub

        switch (v.getId()) {
            case R.id.save:
                //	sendItem();
                break;

            default:
                break;
        }

    }


    @Override
    public void getPopUpResult(Constant.POP_UP type, int pos) {

    }


    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {

        boolean isProductCheck = false;
        switch (checkedId) {

            case R.id.productButton:
                isProductCheck = true;
                break;
            case R.id.serviceButton:
                isProductCheck = false;
                break;

        }

        String selectQuery = "Select " + DatabaseHelper.JSON_DATA
                + " From " + DatabaseHelper.Table_ProductAndServices;

        Cursor cursor = db.getRecords(selectQuery);

        boolean isShowProgressBar = false;
        if (cursor.moveToFirst() && cursor.getCount() > 0) {

            productandlist = new ArrayList<>();
            servicesList = new
                    ArrayList<>();
            for (int i = 0; i < cursor.getCount(); i++) {

                try {
                    HashMap<String, String> map;

                    JSONObject object = new JSONObject(cursor.getString(cursor
                            .getColumnIndex(DatabaseHelper.JSON_DATA)));

                    for (int k = 0; k < object.getJSONObject("products").getJSONArray("product").length(); k++) {
                        map = new HashMap<>();
                        JSONObject chargeObj = object.getJSONObject("products").getJSONArray("product").getJSONObject(k);
                        map.put(Constant.KEY_ID, chargeObj.getString("product_id"));
                        map.put(Constant.KEY_NAME, chargeObj.getString("product_name"));
                        map.put(Constant.KEY_UNITCOST, chargeObj.getString("unit_cost"));
                        map.put(Constant.KEY_QUANTITY, chargeObj.getString("quantity"));
                        map.put(Constant.KEY_DESCRIPTION, chargeObj.getString("description"));
                        map.put(Constant.KEY_DATE, chargeObj.getString("date"));


                        productandlist.add(map);
                    }

                    for (int k = 0; k < object.getJSONObject("services").getJSONArray("service").length(); k++) {
                        map = new HashMap<>();
                        JSONObject chargeObj = object.getJSONObject("services").getJSONArray("service").getJSONObject(k);
                        map.put(Constant.KEY_ID, chargeObj.getString("service_id"));
                        map.put(Constant.KEY_NAME, chargeObj.getString("service_name"));
                        map.put(Constant.KEY_UNITCOST, chargeObj.getString("unit_cost"));
                        map.put(Constant.KEY_QUANTITY, chargeObj.getString("quantity"));
                        map.put(Constant.KEY_DESCRIPTION, chargeObj.getString("description"));
                        map.put(Constant.KEY_DATE, chargeObj.getString("date"));


                        servicesList.add(map);
                    }


                } catch (JSONException e) {
                    e.printStackTrace();
                }
                if (isProductCheck)
                    mypopUp = new CustomPopup((Activity) context, productandlist, Constant.POP_UP.PRODUCT_LIST, true, this);
                else
                    mypopUp = new CustomPopup((Activity) context, servicesList, Constant.POP_UP.PRODUCT_LIST, true, this);

                mypopUp.show();
            }
        } else isShowProgressBar = true;
        //-------------------call to server----------------------------------------------

        JSONObject obj = new JSONObject();
        try {
            obj.put(Constant.KEY_METHOD, "listGblProduct");
        } catch (JSONException e) {
            e.printStackTrace();
        }
        WebRequest request = new WebRequest(context, obj,
                Constant.invoicelistURL, SERVICE_TYPE.GET_PRODUCT_LIST, this, isShowProgressBar);
        request.execute();


    }
}
